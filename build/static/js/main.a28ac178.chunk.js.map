{"version":3,"sources":["lib/API.ts","components/Skeleton/base/index.tsx","components/Skeleton/card/index.tsx","components/Skeleton/post/index.tsx","components/Skeleton/sidebar/index.tsx","components/Skeleton/subreddit/index.tsx","components/Skeleton/index.tsx","features/subreddits/subredditsSlice.ts","features/theme/themeSlice.ts","features/post/postSlice.ts","features/posts/postsSlice.ts","features/user/userSlice.ts","features/subreddit/subredditSlice.ts","theme/dark.ts","theme/light.ts","theme/index.tsx","lib/scrollToTop.js","routes.tsx","app.tsx","store/rootReducer.ts","store/store.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["FetchError","API_URL","process","REACT_APP_API_URL","initialOptions","headers","accept","getSubreddit","subreddit","a","options","url","fetch","query","json","ok","data","Error","message","SUBREDDIT","getSubredditPosts","after","before","posts","children","map","sp","getAllSubreddits","subreddits","c","ALL_SUBREDDITS","getPost","post","id","POST","getComments","comments","getPostWithComments","getAllPosts","params","p","ALL_POST","getUser","user","USER","getUserPosts","filter","kind","getSearchResults","searchParams","URLSearchParams","search","sr","SEARCH","BaseSkeleton","Box","display","alignItems","justifyContent","width","mb","variant","height","style","marginLeft","animation","marginBottom","flexDirection","pr","withStyles","theme","createStyles","card","border","fade","palette","action","disabled","backgroundColor","background","paper","borderRadius","padding","preview","breakpoints","down","classes","className","Avatar","mt","FlexBox","fd","w","h","PostSkeleton","SidebarSkeleton","pl","maxWidth","ml","Skeleton","type","getSubreddits","createAsyncThunk","API","response","subredditsSlice","createSlice","name","initialState","status","error","isLoading","isError","page","reducers","extraReducers","String","pending","state","fulfilled","payload","rejected","storageThemeMode","localStorage","getItem","lightMode","JSON","parse","themeSlice","updateMode","actions","postSlice","postsSlice","getUserByName","userName","userSlice","profile","getSubredditByName","subName","subredditSlice","info","darkTheme","default","clrAccent","clrHover","main","clrReddit","lightTheme","ThemeProviderWithMode","themeBasedOnMode","useSelector","createMuiTheme","values","xs","xxs","sm","md","lg","xl","overrides","MuiCssBaseline","html","WebkitFontSmoothing","margin","themeConstructor","ThemeProvider","CssBaseline","ScrollToTop","prevProps","this","props","location","window","scrollTo","React","Component","withRouter","HomePage","lazy","PostPage","SubredditPage","SubredditsPage","ProfilePage","NoMatchPage","appRoutes","path","Routes","Suspense","fallback","idx","component","exact","App","rootReducer","combineReducers","themeReducer","userReducer","postReducer","postsReducer","subredditReducer","subredditsReducer","store","configureStore","reducer","devTools","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","require","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.a28ac178.chunk.js","sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'https://www.reddit.com';\n\nconst initialOptions = {\n  headers: {\n    accept: 'application/json',\n  },\n};\n\nenum FetchError {\n  POST = 'Failed to get post data',\n  USER = 'Failed to get user data',\n  COMMENTS = 'Failed to get comments data',\n  SUBREDDIT = 'Failed to get subreddit data',\n  ALL_POST = 'Failed to get posts data',\n  ALL_SUBREDDITS = 'Failed to get subreddits data',\n  POST_WITH_COMMENTS = 'Failed to get posts with comments data',\n  SEARCH = 'No results found!',\n}\n\nconst getSubreddit = async (subreddit: string, options = initialOptions) => {\n  const url = `${API_URL}/r/${subreddit}/about.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) return json.data;\n\n  throw new Error(json.message || FetchError.SUBREDDIT);\n};\n\n/* Preia postarile pe subreddits */\nconst getSubredditPosts = async (\n  subreddit: string,\n  options = initialOptions,\n) => {\n  const url = `${API_URL}/r/${subreddit}/.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: json.data.children.map((sp: any) => sp.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.SUBREDDIT);\n};\n\n/* Preia toate informatiile pe subreddit */\nconst getAllSubreddits = async (options = initialOptions) => {\n  const url = `${API_URL}/subreddits.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      subreddits: json.data.children.map((c: any) => c.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.ALL_SUBREDDITS);\n};\n\n/* Preia toate informatiile postarilor */\nconst getPost = async (post: string[], options = initialOptions) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n\n  const query = await fetch(url, options);\n\n  const json = await query.json();\n\n  if (query.ok) return json[0].data.children[0].data;\n\n  throw new Error(json.message || FetchError.POST);\n};\n\n/* Preia comentariile cu tot cu upvotes */\nconst getComments = async (post: string[], options = initialOptions) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n\n  const query = await fetch(url, options);\n\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json[1].data.after,\n      before: json[1].data.before,\n      comments: json[1].data.children.map((c: any) => c.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.POST);\n};\n\n/* Preia postarile cu tot cu comentarii */\nconst getPostWithComments = async (\n  post: string[],\n  options = initialOptions,\n) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n\n  const query = await fetch(url, options);\n\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json[1].data.after,\n      before: json[1].data.before,\n      comments: json[1].data.children.map((c: any) => c.data),\n      post: json[0].data.children[0].data,\n    };\n  }\n\n  throw new Error(json.message || FetchError.POST);\n};\n\n/* Preia toate postarile */\nconst getAllPosts = async (\n  subreddit?: string,\n  params: string = '',\n  options = initialOptions,\n) => {\n  let url;\n  if (subreddit) {\n    url = `${API_URL}/r/${subreddit}/${params}.json`;\n  } else {\n    url = `${API_URL}/${params}.json`;\n  }\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: json.data.children.map((p: any) => p.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.ALL_POST);\n};\n\n/* Preia informatiile despre useri */\nconst getUser = async (user: string, options = initialOptions) => {\n  const url = `${API_URL}/user/${user}/about/.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) return json.data;\n\n  throw new Error(json.message || FetchError.USER);\n};\n\n/* Preia postarile in functie de userul de care apartin */\nconst getUserPosts = async (user: string, options = initialOptions) => {\n  const url = `${API_URL}/user/${user}/.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    const posts = json.data.children.filter((p: any) => p.kind === 't3');\n    const comments = json.data.children.filter((c: any) => c.kind === 't1');\n\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: posts.map((p: any) => p.data),\n      comments: comments.map((c: any) => c.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.USER);\n};\n\n/* Preia rezultatele cautarii */\nconst getSearchResults = async (\n  params: { q: string; type: string },\n  options = initialOptions,\n) => {\n  const searchParams = new URLSearchParams(params);\n  const url = `${API_URL}/search.json?${searchParams}`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      search: json.data.children.map((sr: any) => sr.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.SEARCH);\n};\n\nexport default {\n  getSubreddit,\n  getAllSubreddits,\n  getSubredditPosts,\n  getPost,\n  getComments,\n  getPostWithComments,\n  getUser,\n  getUserPosts,\n  getAllPosts,\n  getSearchResults,\n};\n","import React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Box } from '@material-ui/core';\n\n// Doua coloane tot timpul\n// TODO: Vezi cum sa bagi contactul tot in aplicatie pe o singura coloana centrala\nconst BaseSkeleton: React.FC = () => {\n  return (\n    <Box\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      width=\"100%\"\n      mb={10}\n      p=\"0 10px\"\n    >\n      <Box display=\"flex\" alignItems=\"center\">\n        <Skeleton variant=\"circle\" width={41} height={39} />\n        <Skeleton\n          variant=\"rect\"\n          width={55}\n          height={20}\n          style={{ marginLeft: 7 }}\n        />\n      </Box>\n      <Box width=\"50%\">\n        <Skeleton\n          animation=\"wave\"\n          height={62}\n          width=\"100%\"\n          style={{ marginBottom: 6 }}\n        />\n      </Box>\n      <Box\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"flex-end\"\n        pr={1}\n        width=\"5%\"\n        justifyContent=\"space-around\"\n      >\n        <Skeleton variant=\"circle\" width={6} height={6} />\n        <Skeleton variant=\"circle\" width={6} height={6} />\n        <Skeleton variant=\"circle\" width={6} height={6} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default BaseSkeleton;\n","import React from 'react';\nimport {\n  Avatar,\n  createStyles,\n  withStyles,\n  Theme,\n  fade,\n  Box,\n} from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nconst cardSkeletonStyles = (theme: Theme) =>\n  createStyles({\n    card: {\n      display: 'flex',\n      alignItems: 'flex-end',\n      width: '100%',\n      border: `1px solid ${fade(theme.palette.action.disabled, 0.07)}`,\n      // backgroundColor: fade(theme.palette.action.disabled, 0.04),\n      backgroundColor: theme.palette.background.paper,\n      borderRadius: 2,\n      marginBottom: 10,\n      padding: 16,\n    },\n    preview: {\n      [theme.breakpoints.down('xs')]: {\n        display: 'none',\n      },\n    },\n  });\n\ntype TProps = {\n  classes: {\n    card: string;\n    preview: string;\n  };\n};\n\n// 885x170\nconst CardSkeleton: React.FC<TProps> = ({ classes }) => {\n  return (\n    <div className={classes.card}>\n      <Box width=\"100%\">\n        <Box\n          mb={2}\n          display=\"flex\"\n          alignItems=\"center\"\n          width=\"290px\"\n          justifyContent=\"space-between\"\n        >\n          <Skeleton variant=\"circle\">\n            <Avatar />\n          </Skeleton>\n          <Skeleton variant=\"rect\" width={95} height={15} />\n          <Skeleton variant=\"rect\" width={125} height={11} />\n        </Box>\n        <Skeleton width=\"90%\" />\n        <Skeleton width=\"90%\" />\n        <Skeleton width=\"90%\" />\n        <Box\n          mt={7}\n          display=\"flex\"\n          alignItems=\"center\"\n          width=\"240px\"\n          justifyContent=\"space-between\"\n        >\n          <Skeleton variant=\"rect\" width={85} height={20} />\n          <Skeleton variant=\"rect\" width={75} height={20} />\n          <Skeleton variant=\"rect\" width={60} height={20} />\n        </Box>\n      </Box>\n      <Box className={classes.preview}>\n        <Skeleton variant=\"rect\" width={230} height={124} />\n      </Box>\n    </div>\n  );\n};\n\nexport default withStyles(cardSkeletonStyles)(CardSkeleton);\n","import React from 'react';\nimport { Avatar, Box } from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\n// Realizeaza scheletul interfetei in Responsive Design cu breakpoints personalizati\ninterface IBoxProps {\n  fd?: string;\n  mb?: string | number;\n  w?: string | number;\n  h?: string | number;\n  children: React.ReactNode;\n}\n\nconst FlexBox: React.FC<IBoxProps> = ({\n  fd = 'row',\n  mb,\n  w,\n  h = 'inherit',\n  children,\n}) => {\n  return (\n    <Box\n      mb={mb}\n      display=\"flex\"\n      flexDirection={fd}\n      alignItems=\"center\"\n      width={w}\n      height={h}\n      justifyContent=\"space-between\"\n    >\n      {children}\n    </Box>\n  );\n};\n\nconst PostSkeleton: React.FC = () => {\n  return (\n    <>\n      <FlexBox w=\"285px\" mb={5}>\n        <Skeleton variant=\"rect\" width={63} height={20} />\n        <Skeleton variant=\"rect\" width={63} height={20} />\n        <Skeleton variant=\"rect\" width={63} height={20} />\n        <Skeleton variant=\"rect\" width={63} height={20} />\n      </FlexBox>\n      <FlexBox w=\"100%\" mb={10}>\n        <Box\n          width=\"20%\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          height=\"35px\"\n          justifyContent=\"space-between\"\n        >\n          <Skeleton variant=\"rect\" width={48} height={17} />\n          <Skeleton variant=\"rect\" width={43} height={14} />\n        </Box>\n        <Box width=\"100%\">\n          <FlexBox mb={3} w=\"250px\">\n            <Skeleton variant=\"circle\">\n              <Avatar />\n            </Skeleton>\n            <Skeleton variant=\"rect\" width={90} height={15} />\n            <Skeleton variant=\"rect\" width={105} height={11} />\n          </FlexBox>\n          <Skeleton width=\"90%\" height={28} />\n          <Skeleton width=\"90%\" height={28} />\n        </Box>\n      </FlexBox>\n      <Skeleton variant=\"rect\" width=\"100%\" height={468} />\n    </>\n  );\n};\n\nexport default PostSkeleton;\n","import React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Box } from '@material-ui/core';\n\nconst SidebarSkeleton: React.FC = () => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\" p={1}>\n      <Skeleton variant=\"circle\" width={47} height={40} />\n      <Box width=\"100%\" pl={2}>\n        <Skeleton\n          animation=\"wave\"\n          height={12}\n          width=\"40%\"\n          style={{ marginBottom: 6 }}\n        />\n        <Skeleton height={12} width=\"80%\" />\n      </Box>\n    </Box>\n  );\n};\n\nexport default SidebarSkeleton;\n","import React from 'react';\nimport {\n  Avatar,\n  createStyles,\n  withStyles,\n  Theme,\n  fade,\n  Box,\n} from '@material-ui/core';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nconst cardSkeletonStyles = (theme: Theme) =>\n  createStyles({\n    subreddit: {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%',\n      maxWidth: '400px',\n      border: `1px solid ${fade(theme.palette.action.disabled, 0.07)}`,\n      backgroundColor: theme.palette.background.paper,\n      borderRadius: 2,\n      marginBottom: 10,\n      padding: 14,\n    },\n    preview: {\n      width: '100%',\n    },\n  });\n\ntype TProps = {\n  classes: {\n    subreddit: string;\n    preview: string;\n  };\n};\n\n// 885x170\nconst SubredditSkeleton: React.FC<TProps> = ({ classes }) => {\n  return (\n    <div className={classes.subreddit}>\n      <Box mb={2} display=\"flex\" alignItems=\"center\" width=\"290px\">\n        <Skeleton variant=\"circle\">\n          <Avatar />\n        </Skeleton>\n        <Box display=\"flex\" flexDirection=\"column\" pl={2}>\n          <Skeleton\n            variant=\"rect\"\n            width={100}\n            height={15}\n            style={{ marginBottom: 4 }}\n          />\n          <Skeleton variant=\"rect\" width={185} height={11} />\n        </Box>\n      </Box>\n      <Box className={classes.preview}>\n        <Skeleton variant=\"rect\" width=\"100%\" height={185} />\n      </Box>\n      <Box display=\"flex\" flexDirection=\"column\" width=\"100%\" ml={2} mt={2}>\n        <Skeleton variant=\"rect\" width={115} height={26} />\n        <Box mt={3} mb={3}>\n          <Skeleton width=\"39%\" />\n          <Skeleton width=\"90%\" />\n          <Skeleton width=\"90%\" />\n        </Box>\n        <Skeleton variant=\"rect\" width={140} height={18} />\n      </Box>\n    </div>\n  );\n};\n\nexport default withStyles(cardSkeletonStyles)(SubredditSkeleton);\n","import React from 'react';\nimport BaseSkeleton from './base';\nimport CardSkeleton from './card';\nimport PostSkeleton from './post';\nimport SidebarSkeleton from './sidebar';\nimport SubredditSkeleton from './subreddit';\n\ninterface IProps {\n  type?: 'card' | 'post' | 'sidebar' | 'subreddit';\n}\n\nconst Skeleton: React.FC<IProps> = ({ type }) => {\n  if (type === 'card') return <CardSkeleton />;\n  if (type === 'post') return <PostSkeleton />;\n  if (type === 'sidebar') return <SidebarSkeleton />;\n  if (type === 'subreddit') return <SubredditSkeleton />;\n\n  return <BaseSkeleton />;\n};\n\nexport default Skeleton;\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPosts extends IFetch {\n  subreddits: object[];\n}\n\ntype TResponse = {\n  subreddits: object[];\n  after: string;\n  before: string;\n};\n\nexport const getSubreddits = createAsyncThunk(\n  'subreddits/getSubreddits',\n  async () => {\n    const response: TResponse = await API.getAllSubreddits();\n\n    return response;\n  },\n);\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  subreddits: [],\n};\n\n/* Incarca doar 9 subreddit-uri */\nconst subredditsSlice = createSlice({\n  name: 'subreddits',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getSubreddits.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubreddits.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<TResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.subreddits = payload.subreddits;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getSubreddits.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default subredditsSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\n/* Updateaza slice-ul si la schimbarea theme-ului */\n\ntype ThemeState = {\n  lightMode: true | false;\n};\n\nconst storageThemeMode = localStorage.getItem('material-ui-theme');\nconst defautlTheme = storageThemeMode ? JSON.parse(storageThemeMode) : true;\n\nconst initialState: ThemeState = { lightMode: defautlTheme };\n\nconst themeSlice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {\n    updateMode(state: ThemeState, { payload }: PayloadAction<boolean>) {\n      state.lightMode = payload;\n    },\n  },\n});\n\nexport const { updateMode } = themeSlice.actions;\n\nexport default themeSlice.reducer;\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch, TPost } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPost extends IFetch {\n  data: TPost;\n}\n\ntype TResponse = {\n  post: object;\n  comments: object[];\n  after: string;\n  before: string;\n};\n\nconst initialState: IPost = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  data: {\n    post: {},\n    comments: [],\n  },\n};\n\nexport const getPost = createAsyncThunk(\n  'post/getPost',\n  async ([subreddit, id]: string[]) => {\n    const response: TResponse = await API.getPostWithComments([subreddit, id]);\n\n    return response;\n  },\n);\n\nconst postSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getPost.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getPost.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<TResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.data.post = payload.post;\n      state.data.comments = payload.comments;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getPost.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default postSlice.reducer;\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPosts extends IFetch {\n  posts: object[];\n}\n\ntype TResponse = {\n  posts: object[];\n  after: string;\n  before: string;\n};\n\nexport const getAllPosts = createAsyncThunk(\n  'posts/getAllPosts',\n  async (params: string) => {\n    const response: TResponse = await API.getAllPosts('', params);\n\n    return response;\n  },\n);\n\n/* Fa sync la slice impreuna cu datele preluate prin API */\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  posts: [],\n};\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getAllPosts.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getAllPosts.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<TResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.posts = payload.posts;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getAllPosts.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default postsSlice.reducer;\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IFetch, TPage } from '../index';\nimport API from '../../lib/API';\n\ninterface IResponse extends TPage {\n  posts: object[];\n  comments: object[];\n}\n\nexport interface IPosts extends IFetch {\n  profile: object | any;\n  data: {\n    posts: object[];\n    comments: object[];\n  };\n}\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  profile: {},\n  data: {\n    posts: [],\n    comments: [],\n  },\n};\n\nexport const getUserByName = createAsyncThunk(\n  'user/getUserByName',\n  async (userName: string) => {\n    const response = await API.getUser(userName);\n\n    return response;\n  },\n);\n\nexport const getUserPosts = createAsyncThunk(\n  'user/getUserPosts',\n  async (userName: string) => {\n    const response: IResponse = await API.getUserPosts(userName);\n\n    return response;\n  },\n);\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getUserByName.pending)]: (state) => {\n      state.status = 'pending';\n    },\n    [String(getUserByName.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<object>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.profile = payload;\n    },\n    [String(getUserByName.rejected)]: (\n      state,\n      { payload }: PayloadAction<string>,\n    ) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = payload;\n    },\n    [String(getUserPosts.pending)]: (state) => {\n      state.status = 'pending';\n    },\n    [String(getUserPosts.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<IResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.data.posts = payload.posts;\n      state.data.comments = payload.comments;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getUserPosts.rejected)]: (\n      state,\n      { payload }: PayloadAction<string>,\n    ) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = payload;\n    },\n  },\n});\n\nexport default userSlice.reducer;\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch, TPage } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPosts extends IFetch {\n  info: object | any;\n  posts: object[];\n}\n\ninterface IResponse extends TPage {\n  posts: object[];\n}\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  info: {},\n  posts: [],\n};\n\nexport const getSubredditByName = createAsyncThunk(\n  'subreddit/getSubredditByName',\n  async (subName: string) => {\n    const response = await API.getSubreddit(subName);\n\n    return response;\n  },\n);\n\nexport const getSubredditPosts = createAsyncThunk(\n  'subreddit/getSubredditPosts',\n  async (subName: string) => {\n    const response: IResponse = await API.getSubredditPosts(subName);\n\n    return response;\n  },\n);\n\nconst subredditSlice = createSlice({\n  name: 'subreddit',\n  initialState,\n  reducers: {},\n  /* Minimizeaza postul */\n  extraReducers: {\n    [String(getSubredditByName.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubredditByName.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<object>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.info = payload;\n    },\n    [String(getSubredditByName.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n    [String(getSubredditPosts.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubredditPosts.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<IResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.posts = payload.posts;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getSubredditPosts.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default subredditSlice.reducer;\n","/* Schimba toate culorile cu complementarul lor in dark theme */\nconst darkTheme = {\n  palette: {\n    type: 'dark',\n    background: {\n      default: '#11151c',\n      paper: '#21262D',\n    },\n    clrAccent: '#161B22',\n    clrHover: {\n      main: '#fafafa',\n    },\n    clrReddit: '#ff4500',\n  },\n};\n\nexport default darkTheme;\n","/* Toate culorile se schimba cu complementarul lor in light theme */\n\nconst lightTheme = {\n  palette: {\n    type: 'light',\n    background: {\n      default: '#EEF0F2',\n    },\n    clrAccent: '#FFFFFF',\n    clrHover: {\n      main: '#1976d2',\n    },\n    clrReddit: '#ff4500',\n  },\n};\n\nexport default lightTheme;\n","/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  CssBaseline,\n  Theme,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store/rootReducer';\nimport darkTheme from './dark';\nimport lightTheme from './light';\n\ndeclare module '@material-ui/core/styles/createPalette' {\n  interface Palette {\n    clrAccent: React.CSSProperties['color'];\n    clrHover: {\n      main: React.CSSProperties['color'];\n    };\n    clrReddit: React.CSSProperties['color'];\n  }\n  interface PaletteOptions {\n    clrAccent: React.CSSProperties['color'];\n    clrHover: {\n      main: React.CSSProperties['color'];\n    };\n    clrReddit: React.CSSProperties['color'];\n  }\n}\n\ndeclare module '@material-ui/core/styles/createBreakpoints' {\n  interface BreakpointOverrides {\n    xxs: true;\n  }\n}\n\ntype Props = {\n  children: React.ReactNode;\n};\n\n// TODO: Invata cum sa faci sa mearga Dark Mode fara sa transmiti tipul obiectului ca referinta\nconst themeConstructor = (): Theme => {\n  const { lightMode } = useSelector((state: RootState) => state.theme);\n  const themeBasedOnMode: object = lightMode ? lightTheme : darkTheme;\n\n  return createMuiTheme({\n    ...themeBasedOnMode,\n    /* breakpoints ale ecranului responsive, in functie de dimensiunea ferestrei */\n    breakpoints: {\n      values: {\n        xs: 0,\n        xxs: 450,\n        sm: 600,\n        md: 960,\n        lg: 1280,\n        xl: 1920,\n      },\n    },\n    overrides: {\n      MuiCssBaseline: {\n        '@global': {\n          html: {\n            WebkitFontSmoothing: 'auto',\n            margin: 0,\n            padding: 0,\n          },\n        },\n      },\n    },\n  });\n};\n\nconst ThemeProviderWithMode: React.FC<Props> = ({ children }) => {\n  const theme = themeConstructor();\n  /* exporta theme provider-ul pe toate paginile */\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {children}\n    </ThemeProvider>\n  );\n};\n\nexport default ThemeProviderWithMode;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass ScrollToTop extends React.Component {\n  componentDidUpdate(prevProps) {\n    const { location } = this.props;\n\n    if (location !== prevProps.location) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    const { children } = this.props;\n\n    return children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\nimport ScrollToTop from './lib/scrollToTop';\nimport Skeleton from './components/Skeleton';\n\nconst HomePage = React.lazy(() => import('./pages/home'));\nconst PostPage = React.lazy(() => import('./pages/post'));\nconst SubredditPage = React.lazy(() => import('./pages/subreddit'));\nconst SubredditsPage = React.lazy(() => import('./pages/subreddits'));\nconst ProfilePage = React.lazy(() => import('./pages/profile'));\nconst NoMatchPage = React.lazy(() => import('./pages/404'));\n\ninterface IRoutes {\n  path: string;\n  page:\n    | React.LazyExoticComponent<React.ComponentType<any>>\n    | React.LazyExoticComponent<React.FC<{}>>;\n}\n\n// TODO: Imbunatateste app routing path-urile :(\nconst appRoutes: IRoutes[] = [\n  {\n    path: '/',\n    page: HomePage,\n  },\n  {\n    path: '/filter/:filterBy',\n    page: HomePage,\n  },\n  {\n    path: '/post/:subredditName/comments/:id',\n    page: PostPage,\n  },\n  {\n    path: '/subreddit/:subredditName',\n    page: SubredditPage,\n  },\n  {\n    path: '/subreddits/',\n    page: SubredditsPage,\n  },\n  {\n    path: '/profile/:userName',\n    page: ProfilePage,\n  },\n];\n\n/* Routarea se face cu ajutorul Google Dev si CRA, preluand path-urile server-elor si mapandu-le la indecsii paginilor */\nconst Routes = () => {\n  return (\n    <React.Suspense fallback={<Skeleton />}>\n      <HashRouter>\n        <ScrollToTop>\n          <Switch>\n            {appRoutes.map(({ path, page }, idx) => (\n              <Route\n                path={path}\n                component={page}\n                exact\n                key={`${path}-${idx}`}\n              />\n            ))}\n            <Route path=\"*\">\n              <NoMatchPage />\n            </Route>\n          </Switch>\n        </ScrollToTop>\n      </HashRouter>\n    </React.Suspense>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport ThemeProviderWithMode from './theme';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <ThemeProviderWithMode>\n    <Routes />\n  </ThemeProviderWithMode>\n);\n\nexport default App;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport themeReducer from '../features/theme/themeSlice';\nimport postReducer from '../features/post/postSlice';\nimport postsReducer from '../features/posts/postsSlice';\nimport userReducer from '../features/user/userSlice';\nimport subredditReducer from '../features/subreddit/subredditSlice';\nimport subredditsReducer from '../features/subreddits/subredditsSlice';\n\nconst rootReducer = combineReducers({\n  theme: themeReducer,\n  user: userReducer,\n  post: postReducer,\n  posts: postsReducer,\n  subreddit: subredditReducer,\n  subreddits: subredditsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","/* eslint-disable global-require */\n/* eslint-disable @typescript-eslint/no-var-requires */\nimport { Action, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport rootReducer, { RootState } from './rootReducer';\n\n/* Da-i fetch la datele primite pentru a le stoca in storage */\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport type AppDispatch = typeof store.dispatch;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n\nexport default store;\n","/* SCRIPT DE SERVICE WORKING PRELUAT DE PE CRA */\n/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service. See https://cra.link/PWA',\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log('New content is available ');\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No connection! App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","/* eslint-disable react/react-in-jsx-scope */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable global-require */\n\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst render = () => {\n  const App = require('./app').default;\n  ReactDOM.render(\n    /* Provider reprezinta root-ul tuturor componentelor */\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n};\n\nrender();\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./app', render);\n}\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}