{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\n\nvar PrecacheInstallReportPlugin = function PrecacheInstallReportPlugin() {\n  var _this = this;\n\n  _classCallCheck(this, PrecacheInstallReportPlugin);\n\n  this.updatedURLs = [];\n  this.notUpdatedURLs = [];\n\n  this.handlerWillStart = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n      var request, state;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              request = _ref.request, state = _ref.state;\n\n              // TODO: `state` should never be undefined...\n              if (state) {\n                state.originalRequest = request;\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  this.cachedResponseWillBeUsed = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3) {\n      var event, state, cachedResponse, url;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event = _ref3.event, state = _ref3.state, cachedResponse = _ref3.cachedResponse;\n\n              if (event.type === 'install') {\n                // TODO: `state` should never be undefined...\n                url = state.originalRequest.url;\n\n                if (cachedResponse) {\n                  _this.notUpdatedURLs.push(url);\n                } else {\n                  _this.updatedURLs.push(url);\n                }\n              }\n\n              return _context2.abrupt(\"return\", cachedResponse);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\n\nexport { PrecacheInstallReportPlugin };","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js"],"names":["PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","request","state","originalRequest","cachedResponseWillBeUsed","event","cachedResponse","type","url","push"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;;IACMA,2B,GACF,uCAAc;AAAA;;AAAA;;AACV,OAAKC,WAAL,GAAmB,EAAnB;AACA,OAAKC,cAAL,GAAsB,EAAtB;;AACA,OAAKC,gBAAL;AAAA,yEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,OAAT,QAASA,OAAT,EAAkBC,KAAlB,QAAkBA,KAAlB;;AACpB;AACA,kBAAIA,KAAJ,EAAW;AACPA,gBAAAA,KAAK,CAACC,eAAN,GAAwBF,OAAxB;AACH;;AAJmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB;;AAAA;AAAA;AAAA;AAAA;;AAMA,OAAKG,wBAAL;AAAA,yEAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,KAAT,SAASA,KAAT,EAAgBH,KAAhB,SAAgBA,KAAhB,EAAuBI,cAAvB,SAAuBA,cAAvB;;AAC5B,kBAAID,KAAK,CAACE,IAAN,KAAe,SAAnB,EAA8B;AAC1B;AACMC,gBAAAA,GAFoB,GAEdN,KAAK,CAACC,eAAN,CAAsBK,GAFR;;AAG1B,oBAAIF,cAAJ,EAAoB;AAChB,kBAAA,KAAI,CAACP,cAAL,CAAoBU,IAApB,CAAyBD,GAAzB;AACH,iBAFD,MAGK;AACD,kBAAA,KAAI,CAACV,WAAL,CAAiBW,IAAjB,CAAsBD,GAAtB;AACH;AACJ;;AAV2B,gDAWrBF,cAXqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;;AAAA;AAAA;AAAA;AAAA;AAaH,C;;AAEL,SAAST,2BAAT","sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to determine the\n * of assets that were updated (or not updated) during the install event.\n *\n * @private\n */\nclass PrecacheInstallReportPlugin {\n    constructor() {\n        this.updatedURLs = [];\n        this.notUpdatedURLs = [];\n        this.handlerWillStart = async ({ request, state, }) => {\n            // TODO: `state` should never be undefined...\n            if (state) {\n                state.originalRequest = request;\n            }\n        };\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\n            if (event.type === 'install') {\n                // TODO: `state` should never be undefined...\n                const url = state.originalRequest.url;\n                if (cachedResponse) {\n                    this.notUpdatedURLs.push(url);\n                }\n                else {\n                    this.updatedURLs.push(url);\n                }\n            }\n            return cachedResponse;\n        };\n    }\n}\nexport { PrecacheInstallReportPlugin };\n"]},"metadata":{},"sourceType":"module"}