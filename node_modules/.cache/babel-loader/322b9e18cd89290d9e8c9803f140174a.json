{"ast":null,"code":"import _toConsumableArray from\"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React from'react';import{Link}from'react-router-dom';import{withStyles,Avatar,Tooltip,Button,Chip}from'@material-ui/core';import CommentIcon from'@material-ui/icons/Comment';import ShareIcon from'@material-ui/icons/Share';import LinkIcon from'@material-ui/icons/Link';import truncate from'lodash/truncate';import{copyToClipboard,fd,getSrcFromStr}from'../../../helpers';import postCardStyles from'./postCard.styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PostCard=function PostCard(_ref){var Component=_ref.component,classes=_ref.classes,data=_ref.data;if(!Component)throw new Error('Component was not specified');if(!data)return null;var isImage=function isImage(){return /bmp|webp|png|jpg|jpeg|gif$/.test(data.url);};// TODO Figure out how to make \"mov\" keyword not to match the \"movie\" subreddit in the url\nvar isVideo=function isVideo(){return /mp4|gifv|mkv|webm$/.test(data.url);};var videoUrl=function videoUrl(){var urlParts=data.url.split('.');urlParts.pop();return[].concat(_toConsumableArray(urlParts),['mp4']).join('.');};var isEmbed=function isEmbed(){if(data.media){return data.media.type==='youtube.com';}return false;};// BUG: isLink does not match all link posts\n// TODO: Handle all the edge cases, including property self hint not having an assigned value for some reddit self links\nvar isLink=function isLink(){return!isVideo()&&(data.post_hint==='link'||data.post_hint==='self'||data.domain==='instagram.com');};var preview;if(isImage()){preview=/*#__PURE__*/_jsx(\"img\",{src:data.url,alt:data.subreddit});}else if(isVideo()){var _url=videoUrl();preview=/*#__PURE__*/_jsx(\"video\",{controls:true,muted:true,autoPlay:true,loop:true,\"aria-label\":data.title,children:/*#__PURE__*/_jsx(\"source\",{type:\"video/mp4\",src:_url})});}else if(isEmbed()){var _url2=getSrcFromStr(data.media_embed.content);preview=/*#__PURE__*/_jsx(\"iframe\",{title:data.subreddit,\"aria-label\":data.title,src:_url2,allow:\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",frameBorder:\"0\",allowFullScreen:true});}else if(isLink()){preview=/*#__PURE__*/_jsx(Chip,{label:\"External Link\",variant:\"outlined\",color:\"primary\",component:\"a\",href:data.url,target:\"_blank\",rel:\"noopener noreferrer\",clickable:true});}else{preview=null;}var url=process.env.REACT_APP_VERCEL_URL||'http://localhost:3000';var shareUrl=\"\".concat(url,\"/#/post/\").concat(data.subreddit,\"/comments/\").concat(data.id);return/*#__PURE__*/_jsxs(Component,{className:classes.root,\"aria-label\":\"reddit post\",children:[/*#__PURE__*/_jsxs(\"div\",{className:classes.post,children:[/*#__PURE__*/_jsxs(\"header\",{className:classes.header,\"aria-label\":\"post head\",children:[/*#__PURE__*/_jsx(Avatar,{alt:data.subreddit,src:data.thumbnail}),/*#__PURE__*/_jsxs(\"div\",{className:classes.info,children:[/*#__PURE__*/_jsx(\"span\",{\"data-testid\":\"subreddit\",children:/*#__PURE__*/_jsxs(Link,{to:\"/subreddit/\".concat(data.subreddit),children:[\"r/\",data.subreddit]})}),/*#__PURE__*/_jsxs(\"p\",{\"data-testid\":\"author\",children:[\"Posted by\",' ',/*#__PURE__*/_jsxs(Link,{to:\"/profile/\".concat(data.author),children:[\"u/\",data.author]})]})]})]}),/*#__PURE__*/_jsxs(\"section\",{className:classes.content,\"aria-label\":\"post body\",children:[/*#__PURE__*/_jsxs(\"div\",{className:classes.details,children:[/*#__PURE__*/_jsxs(Link,{to:\"/post/\".concat(data.subreddit,\"/comments/\").concat(data.id),children:[/*#__PURE__*/_jsx(\"h2\",{\"data-testid\":\"title\",children:data.title}),data.selftext&&/*#__PURE__*/_jsx(\"p\",{\"data-testid\":\"description\",children:truncate(data.selftext,{length:200})})]}),/*#__PURE__*/_jsxs(\"div\",{className:classes.actions,children:[/*#__PURE__*/_jsx(Button,{\"aria-label\":\"comments\",startIcon:/*#__PURE__*/_jsx(CommentIcon,{fontSize:\"small\"}),component:Link,to:\"/post/\".concat(data.subreddit,\"/comments/\").concat(data.id),children:\"Comments\"}),/*#__PURE__*/_jsx(Button,{\"aria-label\":\"details\",startIcon:/*#__PURE__*/_jsx(LinkIcon,{fontSize:\"small\"}),component:Link,to:\"/post/\".concat(data.subreddit,\"/comments/\").concat(data.id),children:\"Details\"}),/*#__PURE__*/_jsx(Tooltip,{placement:\"right\",title:\"Copy\",\"aria-label\":\"copy\",arrow:true,children:/*#__PURE__*/_jsx(Button,{\"aria-label\":\"share\",startIcon:/*#__PURE__*/_jsx(ShareIcon,{fontSize:\"small\"}),onClick:function onClick(){return copyToClipboard(shareUrl);},children:\"Share\"})})]})]}),/*#__PURE__*/_jsx(\"div\",{className:classes.preview,\"data-testid\":\"preview\",children:preview})]})]}),/*#__PURE__*/_jsx(\"div\",{className:classes.ratings,children:/*#__PURE__*/_jsx(\"h2\",{children:fd.shortenLargeNumber(data.ups,null)})})]});};export default withStyles(postCardStyles)(PostCard);","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient2/src/components/Card/postCard/index.tsx"],"names":["React","Link","withStyles","Avatar","Tooltip","Button","Chip","CommentIcon","ShareIcon","LinkIcon","truncate","copyToClipboard","fd","getSrcFromStr","postCardStyles","PostCard","Component","component","classes","data","Error","isImage","test","url","isVideo","videoUrl","urlParts","split","pop","join","isEmbed","media","type","isLink","post_hint","domain","preview","subreddit","title","media_embed","content","process","env","REACT_APP_VERCEL_URL","shareUrl","id","root","post","header","thumbnail","info","author","details","selftext","length","actions","ratings","shortenLargeNumber","ups"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles, Avatar, Tooltip, Button, Chip } from '@material-ui/core';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport ShareIcon from '@material-ui/icons/Share';\nimport LinkIcon from '@material-ui/icons/Link';\nimport truncate from 'lodash/truncate';\nimport { copyToClipboard, fd, getSrcFromStr } from '../../../helpers';\nimport postCardStyles, { StyleProps } from './postCard.styles';\n\nexport type TPostData = {\n  id: string;\n  subreddit: string;\n  title: string;\n  author: string;\n  selftext: string;\n  domain: string;\n  media: {\n    type: string;\n  } | null;\n  media_embed: {\n    content: string;\n  };\n  secure_media_embed: {\n    media_domain_url: string;\n  };\n  thumbnail: string;\n  permalink: string;\n  post_hint: string;\n  url: string;\n  ups: number;\n};\nexport interface PostDataProps {\n  component?: React.ElementType;\n  data?: TPostData;\n}\n\nconst PostCard: React.FC<StyleProps & PostDataProps> = ({\n  component: Component,\n  classes,\n  data,\n}): React.ReactElement | null => {\n  if (!Component) throw new Error('Component was not specified');\n  if (!data) return null;\n\n  const isImage = () => /bmp|webp|png|jpg|jpeg|gif$/.test(data.url);\n\n  // TODO Figure out how to make \"mov\" keyword not to match the \"movie\" subreddit in the url\n  const isVideo = () => /mp4|gifv|mkv|webm$/.test(data.url);\n  const videoUrl = () => {\n    const urlParts = data.url.split('.');\n    urlParts.pop();\n\n    return [...urlParts, 'mp4'].join('.');\n  };\n  const isEmbed = () => {\n    if (data.media) {\n      return data.media.type === 'youtube.com';\n    }\n    return false;\n  };\n\n  // BUG: isLink does not match all link posts\n  // TODO: Handle all the edge cases, including property self hint not having an assigned value for some reddit self links\n  const isLink = () => {\n    return (\n      !isVideo() &&\n      (data.post_hint === 'link' ||\n        data.post_hint === 'self' ||\n        data.domain === 'instagram.com')\n    );\n  };\n\n  let preview;\n  if (isImage()) {\n    preview = <img src={data.url} alt={data.subreddit} />;\n  } else if (isVideo()) {\n    const url = videoUrl();\n\n    preview = (\n      <video controls muted autoPlay loop aria-label={data.title}>\n        <source type=\"video/mp4\" src={url} />\n      </video>\n    );\n  } else if (isEmbed()) {\n    const url = getSrcFromStr(data.media_embed.content);\n\n    preview = (\n      <iframe\n        title={data.subreddit}\n        aria-label={data.title}\n        src={url}\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n        frameBorder=\"0\"\n        allowFullScreen\n      />\n    );\n  } else if (isLink()) {\n    preview = (\n      <Chip\n        label=\"External Link\"\n        variant=\"outlined\"\n        color=\"primary\"\n        component=\"a\"\n        href={data.url}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        clickable\n      />\n    );\n  } else {\n    preview = null;\n  }\n\n  const url = process.env.REACT_APP_VERCEL_URL || 'http://localhost:3000';\n  const shareUrl = `${url}/#/post/${data.subreddit}/comments/${data.id}`;\n\n  return (\n    <Component className={classes.root} aria-label=\"reddit post\">\n      <div className={classes.post}>\n        <header className={classes.header} aria-label=\"post head\">\n          <Avatar alt={data.subreddit} src={data.thumbnail} />\n\n          <div className={classes.info}>\n            <span data-testid=\"subreddit\">\n              <Link to={`/subreddit/${data.subreddit}`}>\n                r/{data.subreddit}\n              </Link>\n            </span>\n\n            <p data-testid=\"author\">\n              Posted by{' '}\n              <Link to={`/profile/${data.author}`}>u/{data.author}</Link>\n            </p>\n          </div>\n        </header>\n        <section className={classes.content} aria-label=\"post body\">\n          <div className={classes.details}>\n            <Link to={`/post/${data.subreddit}/comments/${data.id}`}>\n              <h2 data-testid=\"title\">{data.title}</h2>\n              {data.selftext && (\n                <p data-testid=\"description\">\n                  {truncate(data.selftext, { length: 200 })}\n                </p>\n              )}\n            </Link>\n            <div className={classes.actions}>\n              <Button\n                aria-label=\"comments\"\n                startIcon={<CommentIcon fontSize=\"small\" />}\n                component={Link}\n                to={`/post/${data.subreddit}/comments/${data.id}`}\n              >\n                Comments\n              </Button>\n              <Button\n                aria-label=\"details\"\n                startIcon={<LinkIcon fontSize=\"small\" />}\n                component={Link}\n                to={`/post/${data.subreddit}/comments/${data.id}`}\n              >\n                Details\n              </Button>\n              <Tooltip placement=\"right\" title=\"Copy\" aria-label=\"copy\" arrow>\n                <Button\n                  aria-label=\"share\"\n                  startIcon={<ShareIcon fontSize=\"small\" />}\n                  onClick={() => copyToClipboard(shareUrl)}\n                >\n                  Share\n                </Button>\n              </Tooltip>\n            </div>\n          </div>\n          <div className={classes.preview} data-testid=\"preview\">\n            {preview}\n          </div>\n        </section>\n      </div>\n      <div className={classes.ratings}>\n        <h2>{fd.shortenLargeNumber(data.ups, null)}</h2>\n      </div>\n    </Component>\n  );\n};\n\nexport default withStyles(postCardStyles)(PostCard);\n"]},"metadata":{},"sourceType":"module"}