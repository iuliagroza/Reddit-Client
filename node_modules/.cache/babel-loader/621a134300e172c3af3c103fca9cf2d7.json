{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport API from '../../lib/API';\nexport const getAllPosts = createAsyncThunk('posts/getAllPosts', async params => {\n  const response = await API.getAllPosts('', params);\n  return response;\n});\nconst initialState = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null\n  },\n  posts: []\n};\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getAllPosts.pending)]: state => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getAllPosts.fulfilled)]: (state, {\n      payload\n    }) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.posts = payload.posts;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getAllPosts.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    }\n  }\n});\nexport default postsSlice.reducer;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient2/src/features/posts/postsSlice.ts"],"names":["createSlice","createAsyncThunk","API","getAllPosts","params","response","initialState","status","error","isLoading","isError","page","before","after","posts","postsSlice","name","reducers","extraReducers","String","pending","state","fulfilled","payload","rejected","action","message","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAqCC,gBAArC,QAA6D,kBAA7D;AAEA,OAAOC,GAAP,MAAgB,eAAhB;AAYA,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CACzC,mBADyC,EAEzC,MAAOG,MAAP,IAA0B;AACxB,QAAMC,QAAmB,GAAG,MAAMH,GAAG,CAACC,WAAJ,CAAgB,EAAhB,EAAoBC,MAApB,CAAlC;AAEA,SAAOC,QAAP;AACD,CANwC,CAApC;AASP,MAAMC,YAAoB,GAAG;AAC3BC,EAAAA,MAAM,EAAE,MADmB;AAE3BC,EAAAA,KAAK,EAAE,IAFoB;AAG3BC,EAAAA,SAAS,EAAE,IAHgB;AAI3BC,EAAAA,OAAO,EAAE,KAJkB;AAK3BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,IADJ;AAEJC,IAAAA,KAAK,EAAE;AAFH,GALqB;AAS3BC,EAAAA,KAAK,EAAE;AAToB,CAA7B;AAYA,MAAMC,UAAU,GAAGf,WAAW,CAAC;AAC7BgB,EAAAA,IAAI,EAAE,OADuB;AAE7BV,EAAAA,YAF6B;AAG7BW,EAAAA,QAAQ,EAAE,EAHmB;AAI7BC,EAAAA,aAAa,EAAE;AACb,KAACC,MAAM,CAAChB,WAAW,CAACiB,OAAb,CAAP,GAAgCC,KAAD,IAAW;AACxCA,MAAAA,KAAK,CAACd,MAAN,GAAe,SAAf;AACAc,MAAAA,KAAK,CAACZ,SAAN,GAAkB,IAAlB;AACD,KAJY;AAKb,KAACU,MAAM,CAAChB,WAAW,CAACmB,SAAb,CAAP,GAAiC,CAC/BD,KAD+B,EAE/B;AAAEE,MAAAA;AAAF,KAF+B,KAG5B;AACHF,MAAAA,KAAK,CAACd,MAAN,GAAe,WAAf;AACAc,MAAAA,KAAK,CAACX,OAAN,GAAgB,KAAhB;AACAW,MAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACAY,MAAAA,KAAK,CAACP,KAAN,GAAcS,OAAO,CAACT,KAAtB;AACAO,MAAAA,KAAK,CAACV,IAAN,CAAWE,KAAX,GAAmBU,OAAO,CAACV,KAA3B;AACAQ,MAAAA,KAAK,CAACV,IAAN,CAAWC,MAAX,GAAoBW,OAAO,CAACX,MAA5B;AACD,KAfY;AAgBb,KAACO,MAAM,CAAChB,WAAW,CAACqB,QAAb,CAAP,GAAgC,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACjDJ,MAAAA,KAAK,CAACd,MAAN,GAAe,QAAf;AACAc,MAAAA,KAAK,CAACX,OAAN,GAAgB,IAAhB;AACAW,MAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACAY,MAAAA,KAAK,CAACb,KAAN,GAAciB,MAAM,CAACjB,KAAP,CAAakB,OAA3B;AACD;AArBY;AAJc,CAAD,CAA9B;AA6BA,eAAeX,UAAU,CAACY,OAA1B","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPosts extends IFetch {\n  posts: object[];\n}\n\ntype TResponse = {\n  posts: object[];\n  after: string;\n  before: string;\n};\n\nexport const getAllPosts = createAsyncThunk(\n  'posts/getAllPosts',\n  async (params: string) => {\n    const response: TResponse = await API.getAllPosts('', params);\n\n    return response;\n  },\n);\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  posts: [],\n};\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getAllPosts.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getAllPosts.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<TResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.posts = payload.posts;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getAllPosts.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default postsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}