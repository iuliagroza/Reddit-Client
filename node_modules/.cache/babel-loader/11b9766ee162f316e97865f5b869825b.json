{"ast":null,"code":"import _slicedToArray from\"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var API_URL=process.env.REACT_APP_API_URL||'https://www.reddit.com';var initialOptions={headers:{accept:'application/json'}};var FetchError;(function(FetchError){FetchError[\"POST\"]=\"Failed to get post data\";FetchError[\"USER\"]=\"Failed to get user data\";FetchError[\"COMMENTS\"]=\"Failed to get comments data\";FetchError[\"SUBREDDIT\"]=\"Failed to get subreddit data\";FetchError[\"ALL_POST\"]=\"Failed to get posts data\";FetchError[\"ALL_SUBREDDITS\"]=\"Failed to get subreddits data\";FetchError[\"POST_WITH_COMMENTS\"]=\"Failed to get posts with comments data\";FetchError[\"SEARCH\"]=\"No results found!\";})(FetchError||(FetchError={}));var getSubreddit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(subreddit){var options,url,query,json,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:options=_args.length>1&&_args[1]!==undefined?_args[1]:initialOptions;url=\"\".concat(API_URL,\"/r/\").concat(subreddit,\"/about.json\");_context.next=4;return fetch(url,options);case 4:query=_context.sent;_context.next=7;return query.json();case 7:json=_context.sent;if(!query.ok){_context.next=10;break;}return _context.abrupt(\"return\",json.data);case 10:throw new Error(json.message||FetchError.SUBREDDIT);case 11:case\"end\":return _context.stop();}}},_callee);}));return function getSubreddit(_x){return _ref.apply(this,arguments);};}();var getSubredditPosts=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(subreddit){var options,url,query,json,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:options=_args2.length>1&&_args2[1]!==undefined?_args2[1]:initialOptions;url=\"\".concat(API_URL,\"/r/\").concat(subreddit,\"/.json\");_context2.next=4;return fetch(url,options);case 4:query=_context2.sent;_context2.next=7;return query.json();case 7:json=_context2.sent;if(!query.ok){_context2.next=10;break;}return _context2.abrupt(\"return\",{after:json.data.after,before:json.data.before,posts:json.data.children.map(function(sp){return sp.data;})});case 10:throw new Error(json.message||FetchError.SUBREDDIT);case 11:case\"end\":return _context2.stop();}}},_callee2);}));return function getSubredditPosts(_x2){return _ref2.apply(this,arguments);};}();var getAllSubreddits=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var options,url,query,json,_args3=arguments;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:options=_args3.length>0&&_args3[0]!==undefined?_args3[0]:initialOptions;url=\"\".concat(API_URL,\"/subreddits.json\");_context3.next=4;return fetch(url,options);case 4:query=_context3.sent;_context3.next=7;return query.json();case 7:json=_context3.sent;if(!query.ok){_context3.next=10;break;}return _context3.abrupt(\"return\",{after:json.data.after,before:json.data.before,subreddits:json.data.children.map(function(c){return c.data;})});case 10:throw new Error(json.message||FetchError.ALL_SUBREDDITS);case 11:case\"end\":return _context3.stop();}}},_callee3);}));return function getAllSubreddits(){return _ref3.apply(this,arguments);};}();var getPost=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(post){var options,_post,subreddit,id,url,query,json,_args4=arguments;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:options=_args4.length>1&&_args4[1]!==undefined?_args4[1]:initialOptions;_post=_slicedToArray(post,2),subreddit=_post[0],id=_post[1];url=\"\".concat(API_URL,\"/r/\").concat(subreddit,\"/comments/\").concat(id,\"/.json\");_context4.next=5;return fetch(url,options);case 5:query=_context4.sent;_context4.next=8;return query.json();case 8:json=_context4.sent;if(!query.ok){_context4.next=11;break;}return _context4.abrupt(\"return\",json[0].data.children[0].data);case 11:throw new Error(json.message||FetchError.POST);case 12:case\"end\":return _context4.stop();}}},_callee4);}));return function getPost(_x3){return _ref4.apply(this,arguments);};}();var getComments=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(post){var options,_post2,subreddit,id,url,query,json,_args5=arguments;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:options=_args5.length>1&&_args5[1]!==undefined?_args5[1]:initialOptions;_post2=_slicedToArray(post,2),subreddit=_post2[0],id=_post2[1];url=\"\".concat(API_URL,\"/r/\").concat(subreddit,\"/comments/\").concat(id,\"/.json\");_context5.next=5;return fetch(url,options);case 5:query=_context5.sent;_context5.next=8;return query.json();case 8:json=_context5.sent;if(!query.ok){_context5.next=11;break;}return _context5.abrupt(\"return\",{after:json[1].data.after,before:json[1].data.before,comments:json[1].data.children.map(function(c){return c.data;})});case 11:throw new Error(json.message||FetchError.POST);case 12:case\"end\":return _context5.stop();}}},_callee5);}));return function getComments(_x4){return _ref5.apply(this,arguments);};}();var getPostWithComments=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(post){var options,_post3,subreddit,id,url,query,json,_args6=arguments;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:options=_args6.length>1&&_args6[1]!==undefined?_args6[1]:initialOptions;_post3=_slicedToArray(post,2),subreddit=_post3[0],id=_post3[1];url=\"\".concat(API_URL,\"/r/\").concat(subreddit,\"/comments/\").concat(id,\"/.json\");_context6.next=5;return fetch(url,options);case 5:query=_context6.sent;_context6.next=8;return query.json();case 8:json=_context6.sent;if(!query.ok){_context6.next=11;break;}return _context6.abrupt(\"return\",{after:json[1].data.after,before:json[1].data.before,comments:json[1].data.children.map(function(c){return c.data;}),post:json[0].data.children[0].data});case 11:throw new Error(json.message||FetchError.POST);case 12:case\"end\":return _context6.stop();}}},_callee6);}));return function getPostWithComments(_x5){return _ref6.apply(this,arguments);};}();var getAllPosts=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(subreddit){var params,options,url,query,json,_args7=arguments;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:params=_args7.length>1&&_args7[1]!==undefined?_args7[1]:'';options=_args7.length>2&&_args7[2]!==undefined?_args7[2]:initialOptions;if(subreddit){url=\"\".concat(API_URL,\"/r/\").concat(subreddit,\"/\").concat(params,\".json\");}else{url=\"\".concat(API_URL,\"/\").concat(params,\".json\");}_context7.next=5;return fetch(url,options);case 5:query=_context7.sent;_context7.next=8;return query.json();case 8:json=_context7.sent;if(!query.ok){_context7.next=11;break;}return _context7.abrupt(\"return\",{after:json.data.after,before:json.data.before,posts:json.data.children.map(function(p){return p.data;})});case 11:throw new Error(json.message||FetchError.ALL_POST);case 12:case\"end\":return _context7.stop();}}},_callee7);}));return function getAllPosts(_x6){return _ref7.apply(this,arguments);};}();var getUser=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(user){var options,url,query,json,_args8=arguments;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:options=_args8.length>1&&_args8[1]!==undefined?_args8[1]:initialOptions;url=\"\".concat(API_URL,\"/user/\").concat(user,\"/about/.json\");_context8.next=4;return fetch(url,options);case 4:query=_context8.sent;_context8.next=7;return query.json();case 7:json=_context8.sent;if(!query.ok){_context8.next=10;break;}return _context8.abrupt(\"return\",json.data);case 10:throw new Error(json.message||FetchError.USER);case 11:case\"end\":return _context8.stop();}}},_callee8);}));return function getUser(_x7){return _ref8.apply(this,arguments);};}();var getUserPosts=/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(user){var options,url,query,json,posts,comments,_args9=arguments;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:options=_args9.length>1&&_args9[1]!==undefined?_args9[1]:initialOptions;url=\"\".concat(API_URL,\"/user/\").concat(user,\"/.json\");_context9.next=4;return fetch(url,options);case 4:query=_context9.sent;_context9.next=7;return query.json();case 7:json=_context9.sent;if(!query.ok){_context9.next=12;break;}posts=json.data.children.filter(function(p){return p.kind==='t3';});comments=json.data.children.filter(function(c){return c.kind==='t1';});return _context9.abrupt(\"return\",{after:json.data.after,before:json.data.before,posts:posts.map(function(p){return p.data;}),comments:comments.map(function(c){return c.data;})});case 12:throw new Error(json.message||FetchError.USER);case 13:case\"end\":return _context9.stop();}}},_callee9);}));return function getUserPosts(_x8){return _ref9.apply(this,arguments);};}();var getSearchResults=/*#__PURE__*/function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(params){var options,searchParams,url,query,json,_args10=arguments;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:options=_args10.length>1&&_args10[1]!==undefined?_args10[1]:initialOptions;searchParams=new URLSearchParams(params);url=\"\".concat(API_URL,\"/search.json?\").concat(searchParams);_context10.next=5;return fetch(url,options);case 5:query=_context10.sent;_context10.next=8;return query.json();case 8:json=_context10.sent;if(!query.ok){_context10.next=11;break;}return _context10.abrupt(\"return\",{after:json.data.after,before:json.data.before,search:json.data.children.map(function(sr){return sr.data;})});case 11:throw new Error(json.message||FetchError.SEARCH);case 12:case\"end\":return _context10.stop();}}},_callee10);}));return function getSearchResults(_x9){return _ref10.apply(this,arguments);};}();export default{getSubreddit:getSubreddit,getAllSubreddits:getAllSubreddits,getSubredditPosts:getSubredditPosts,getPost:getPost,getComments:getComments,getPostWithComments:getPostWithComments,getUser:getUser,getUserPosts:getUserPosts,getAllPosts:getAllPosts,getSearchResults:getSearchResults};","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient2/src/lib/API.ts"],"names":["API_URL","process","env","REACT_APP_API_URL","initialOptions","headers","accept","FetchError","getSubreddit","subreddit","options","url","fetch","query","json","ok","data","Error","message","SUBREDDIT","getSubredditPosts","after","before","posts","children","map","sp","getAllSubreddits","subreddits","c","ALL_SUBREDDITS","getPost","post","id","POST","getComments","comments","getPostWithComments","getAllPosts","params","p","ALL_POST","getUser","user","USER","getUserPosts","filter","kind","getSearchResults","searchParams","URLSearchParams","search","sr","SEARCH"],"mappings":"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","sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'https://www.reddit.com';\n\nconst initialOptions = {\n  headers: {\n    accept: 'application/json',\n  },\n};\n\nenum FetchError {\n  POST = 'Failed to get post data',\n  USER = 'Failed to get user data',\n  COMMENTS = 'Failed to get comments data',\n  SUBREDDIT = 'Failed to get subreddit data',\n  ALL_POST = 'Failed to get posts data',\n  ALL_SUBREDDITS = 'Failed to get subreddits data',\n  POST_WITH_COMMENTS = 'Failed to get posts with comments data',\n  SEARCH = 'No results found!',\n}\n\nconst getSubreddit = async (subreddit: string, options = initialOptions) => {\n  const url = `${API_URL}/r/${subreddit}/about.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) return json.data;\n\n  throw new Error(json.message || FetchError.SUBREDDIT);\n};\n\nconst getSubredditPosts = async (\n  subreddit: string,\n  options = initialOptions,\n) => {\n  const url = `${API_URL}/r/${subreddit}/.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: json.data.children.map((sp: any) => sp.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.SUBREDDIT);\n};\n\nconst getAllSubreddits = async (options = initialOptions) => {\n  const url = `${API_URL}/subreddits.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      subreddits: json.data.children.map((c: any) => c.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.ALL_SUBREDDITS);\n};\n\nconst getPost = async (post: string[], options = initialOptions) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n\n  const query = await fetch(url, options);\n\n  const json = await query.json();\n\n  if (query.ok) return json[0].data.children[0].data;\n\n  throw new Error(json.message || FetchError.POST);\n};\n\nconst getComments = async (post: string[], options = initialOptions) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n\n  const query = await fetch(url, options);\n\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json[1].data.after,\n      before: json[1].data.before,\n      comments: json[1].data.children.map((c: any) => c.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.POST);\n};\n\nconst getPostWithComments = async (\n  post: string[],\n  options = initialOptions,\n) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n\n  const query = await fetch(url, options);\n\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json[1].data.after,\n      before: json[1].data.before,\n      comments: json[1].data.children.map((c: any) => c.data),\n      post: json[0].data.children[0].data,\n    };\n  }\n\n  throw new Error(json.message || FetchError.POST);\n};\n\nconst getAllPosts = async (\n  subreddit?: string,\n  params: string = '',\n  options = initialOptions,\n) => {\n  let url;\n  if (subreddit) {\n    url = `${API_URL}/r/${subreddit}/${params}.json`;\n  } else {\n    url = `${API_URL}/${params}.json`;\n  }\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: json.data.children.map((p: any) => p.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.ALL_POST);\n};\n\nconst getUser = async (user: string, options = initialOptions) => {\n  const url = `${API_URL}/user/${user}/about/.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) return json.data;\n\n  throw new Error(json.message || FetchError.USER);\n};\n\nconst getUserPosts = async (user: string, options = initialOptions) => {\n  const url = `${API_URL}/user/${user}/.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    const posts = json.data.children.filter((p: any) => p.kind === 't3');\n    const comments = json.data.children.filter((c: any) => c.kind === 't1');\n\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: posts.map((p: any) => p.data),\n      comments: comments.map((c: any) => c.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.USER);\n};\n\nconst getSearchResults = async (\n  params: { q: string; type: string },\n  options = initialOptions,\n) => {\n  const searchParams = new URLSearchParams(params);\n  const url = `${API_URL}/search.json?${searchParams}`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      search: json.data.children.map((sr: any) => sr.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.SEARCH);\n};\n\nexport default {\n  getSubreddit,\n  getAllSubreddits,\n  getSubredditPosts,\n  getPost,\n  getComments,\n  getPostWithComments,\n  getUser,\n  getUserPosts,\n  getAllPosts,\n  getSearchResults,\n};\n"]},"metadata":{},"sourceType":"module"}