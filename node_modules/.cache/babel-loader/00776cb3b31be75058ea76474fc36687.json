{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport API from '../../lib/API';\nconst initialState = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null\n  },\n  info: {},\n  posts: []\n};\nexport const getSubredditByName = createAsyncThunk('subreddit/getSubredditByName', async subName => {\n  const response = await API.getSubreddit(subName);\n  return response;\n});\nexport const getSubredditPosts = createAsyncThunk('subreddit/getSubredditPosts', async subName => {\n  const response = await API.getSubredditPosts(subName);\n  return response;\n});\nconst subredditSlice = createSlice({\n  name: 'subreddit',\n  initialState,\n  reducers: {},\n\n  /* Minimizeaza postul */\n  extraReducers: {\n    [String(getSubredditByName.pending)]: state => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubredditByName.fulfilled)]: (state, {\n      payload\n    }) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.info = payload;\n    },\n    [String(getSubredditByName.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n    [String(getSubredditPosts.pending)]: state => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubredditPosts.fulfilled)]: (state, {\n      payload\n    }) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.posts = payload.posts;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getSubredditPosts.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    }\n  }\n});\nexport default subredditSlice.reducer;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/features/subreddit/subredditSlice.ts"],"names":["createSlice","createAsyncThunk","API","initialState","status","error","isLoading","isError","page","before","after","info","posts","getSubredditByName","subName","response","getSubreddit","getSubredditPosts","subredditSlice","name","reducers","extraReducers","String","pending","state","fulfilled","payload","rejected","action","message","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch, TPage } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPosts extends IFetch {\n  info: object | any;\n  posts: object[];\n}\n\ninterface IResponse extends TPage {\n  posts: object[];\n}\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  info: {},\n  posts: [],\n};\n\nexport const getSubredditByName = createAsyncThunk(\n  'subreddit/getSubredditByName',\n  async (subName: string) => {\n    const response = await API.getSubreddit(subName);\n\n    return response;\n  },\n);\n\nexport const getSubredditPosts = createAsyncThunk(\n  'subreddit/getSubredditPosts',\n  async (subName: string) => {\n    const response: IResponse = await API.getSubredditPosts(subName);\n\n    return response;\n  },\n);\n\nconst subredditSlice = createSlice({\n  name: 'subreddit',\n  initialState,\n  reducers: {},\n  /* Minimizeaza postul */\n  extraReducers: {\n    [String(getSubredditByName.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubredditByName.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<object>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.info = payload;\n    },\n    [String(getSubredditByName.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n    [String(getSubredditPosts.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubredditPosts.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<IResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.posts = payload.posts;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getSubredditPosts.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default subredditSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}