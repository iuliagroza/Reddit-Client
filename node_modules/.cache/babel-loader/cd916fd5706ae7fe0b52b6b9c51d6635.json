{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _construct from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _toConsumableArray from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\n   * Initializes a new Router.\n   */\n  function Router() {\n    _classCallCheck(this, Router);\n\n    this._routes = new Map();\n    this._defaultHandlerMap = new Map();\n  }\n  /**\n   * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n   * method name ('GET', etc.) to an array of all the corresponding `Route`\n   * instances that are registered.\n   */\n\n\n  _createClass(Router, [{\n    key: \"routes\",\n    get: function get() {\n      return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n\n  }, {\n    key: \"addFetchListener\",\n    value: function addFetchListener() {\n      var _this = this;\n\n      // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n      self.addEventListener('fetch', function (event) {\n        var request = event.request;\n\n        var responsePromise = _this.handleRequest({\n          request: request,\n          event: event\n        });\n\n        if (responsePromise) {\n          event.respondWith(responsePromise);\n        }\n      });\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n\n  }, {\n    key: \"addCacheListener\",\n    value: function addCacheListener() {\n      var _this2 = this;\n\n      // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n      self.addEventListener('message', function (event) {\n        if (event.data && event.data.type === 'CACHE_URLS') {\n          var payload = event.data.payload;\n\n          if (process.env.NODE_ENV !== 'production') {\n            logger.debug(\"Caching URLs from the window\", payload.urlsToCache);\n          }\n\n          var requestPromises = Promise.all(payload.urlsToCache.map(function (entry) {\n            if (typeof entry === 'string') {\n              entry = [entry];\n            }\n\n            var request = _construct(Request, _toConsumableArray(entry));\n\n            return _this2.handleRequest({\n              request: request,\n              event: event\n            }); // TODO(philipwalton): TypeScript errors without this typecast for\n            // some reason (probably a bug). The real type here should work but\n            // doesn't: `Array<Promise<Response> | undefined>`.\n          })); // TypeScript\n\n          event.waitUntil(requestPromises); // If a MessageChannel was used, reply to the message on success.\n\n          if (event.ports && event.ports[0]) {\n            requestPromises.then(function () {\n              return event.ports[0].postMessage(true);\n            });\n          }\n        }\n      });\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n\n  }, {\n    key: \"handleRequest\",\n    value: function handleRequest(_ref) {\n      var _this3 = this;\n\n      var request = _ref.request,\n          event = _ref.event;\n\n      if (process.env.NODE_ENV !== 'production') {\n        assert.isInstance(request, Request, {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'handleRequest',\n          paramName: 'options.request'\n        });\n      }\n\n      var url = new URL(request.url, location.href);\n\n      if (!url.protocol.startsWith('http')) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(\"Workbox Router only supports URLs that start with 'http'.\");\n        }\n\n        return;\n      }\n\n      var sameOrigin = url.origin === location.origin;\n\n      var _this$findMatchingRou = this.findMatchingRoute({\n        event: event,\n        request: request,\n        sameOrigin: sameOrigin,\n        url: url\n      }),\n          params = _this$findMatchingRou.params,\n          route = _this$findMatchingRou.route;\n\n      var handler = route && route.handler;\n      var debugMessages = [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (handler) {\n          debugMessages.push([\"Found a route to handle this request:\", route]);\n\n          if (params) {\n            debugMessages.push([\"Passing the following params to the route's handler:\", params]);\n          }\n        }\n      } // If we don't have a handler because there was no matching route, then\n      // fall back to defaultHandler if that's defined.\n\n\n      var method = request.method;\n\n      if (!handler && this._defaultHandlerMap.has(method)) {\n        if (process.env.NODE_ENV !== 'production') {\n          debugMessages.push(\"Failed to find a matching route. Falling \" + \"back to the default handler for \".concat(method, \".\"));\n        }\n\n        handler = this._defaultHandlerMap.get(method);\n      }\n\n      if (!handler) {\n        if (process.env.NODE_ENV !== 'production') {\n          // No handler so Workbox will do nothing. If logs is set of debug\n          // i.e. verbose, we should print out this information.\n          logger.debug(\"No route found for: \".concat(getFriendlyURL(url)));\n        }\n\n        return;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        // We have a handler, meaning Workbox is going to handle the route.\n        // print the routing details to the console.\n        logger.groupCollapsed(\"Router is responding to: \".concat(getFriendlyURL(url)));\n        debugMessages.forEach(function (msg) {\n          if (Array.isArray(msg)) {\n            logger.log.apply(logger, _toConsumableArray(msg));\n          } else {\n            logger.log(msg);\n          }\n        });\n        logger.groupEnd();\n      } // Wrap in try and catch in case the handle method throws a synchronous\n      // error. It should still callback to the catch handler.\n\n\n      var responsePromise;\n\n      try {\n        responsePromise = handler.handle({\n          url: url,\n          request: request,\n          event: event,\n          params: params\n        });\n      } catch (err) {\n        responsePromise = Promise.reject(err);\n      } // Get route's catch handler, if it exists\n\n\n      var catchHandler = route && route.catchHandler;\n\n      if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n        responsePromise = responsePromise.catch( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(err) {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!catchHandler) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    if (process.env.NODE_ENV !== 'production') {\n                      // Still include URL here as it will be async from the console group\n                      // and may not make sense without the URL\n                      logger.groupCollapsed(\"Error thrown when responding to: \" + \" \".concat(getFriendlyURL(url), \". Falling back to route's Catch Handler.\"));\n                      logger.error(\"Error thrown by:\", route);\n                      logger.error(err);\n                      logger.groupEnd();\n                    }\n\n                    _context.prev = 2;\n                    _context.next = 5;\n                    return catchHandler.handle({\n                      url: url,\n                      request: request,\n                      event: event,\n                      params: params\n                    });\n\n                  case 5:\n                    return _context.abrupt(\"return\", _context.sent);\n\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](2);\n                    err = _context.t0;\n\n                  case 11:\n                    if (!_this3._catchHandler) {\n                      _context.next = 14;\n                      break;\n                    }\n\n                    if (process.env.NODE_ENV !== 'production') {\n                      // Still include URL here as it will be async from the console group\n                      // and may not make sense without the URL\n                      logger.groupCollapsed(\"Error thrown when responding to: \" + \" \".concat(getFriendlyURL(url), \". Falling back to global Catch Handler.\"));\n                      logger.error(\"Error thrown by:\", route);\n                      logger.error(err);\n                      logger.groupEnd();\n                    }\n\n                    return _context.abrupt(\"return\", _this3._catchHandler.handle({\n                      url: url,\n                      request: request,\n                      event: event\n                    }));\n\n                  case 14:\n                    throw err;\n\n                  case 15:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[2, 8]]);\n          }));\n\n          return function (_x) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      }\n\n      return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n\n  }, {\n    key: \"findMatchingRoute\",\n    value: function findMatchingRoute(_ref3) {\n      var url = _ref3.url,\n          sameOrigin = _ref3.sameOrigin,\n          request = _ref3.request,\n          event = _ref3.event;\n      var routes = this._routes.get(request.method) || [];\n\n      var _iterator = _createForOfIteratorHelper(routes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var route = _step.value;\n          var params = void 0;\n          var matchResult = route.match({\n            url: url,\n            sameOrigin: sameOrigin,\n            request: request,\n            event: event\n          });\n\n          if (matchResult) {\n            if (process.env.NODE_ENV !== 'production') {\n              // Warn developers that using an async matchCallback is almost always\n              // not the right thing to do. \n              if (matchResult instanceof Promise) {\n                logger.warn(\"While routing \".concat(getFriendlyURL(url), \", an async \") + \"matchCallback function was used. Please convert the \" + \"following route to use a synchronous matchCallback function:\", route);\n              }\n            } // See https://github.com/GoogleChrome/workbox/issues/2079\n\n\n            params = matchResult;\n\n            if (Array.isArray(matchResult) && matchResult.length === 0) {\n              // Instead of passing an empty array in as params, use undefined.\n              params = undefined;\n            } else if (matchResult.constructor === Object && Object.keys(matchResult).length === 0) {\n              // Instead of passing an empty object in as params, use undefined.\n              params = undefined;\n            } else if (typeof matchResult === 'boolean') {\n              // For the boolean value true (rather than just something truth-y),\n              // don't set params.\n              // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n              params = undefined;\n            } // Return early if have a match.\n\n\n            return {\n              route: route,\n              params: params\n            };\n          }\n        } // If no match was found above, return and empty object.\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n\n  }, {\n    key: \"setDefaultHandler\",\n    value: function setDefaultHandler(handler) {\n      var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMethod;\n\n      this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n\n  }, {\n    key: \"setCatchHandler\",\n    value: function setCatchHandler(handler) {\n      this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n\n  }, {\n    key: \"registerRoute\",\n    value: function registerRoute(route) {\n      if (process.env.NODE_ENV !== 'production') {\n        assert.isType(route, 'object', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert.hasMethod(route, 'match', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert.isType(route.handler, 'object', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route'\n        });\n        assert.hasMethod(route.handler, 'handle', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route.handler'\n        });\n        assert.isType(route.method, 'string', {\n          moduleName: 'workbox-routing',\n          className: 'Router',\n          funcName: 'registerRoute',\n          paramName: 'route.method'\n        });\n      }\n\n      if (!this._routes.has(route.method)) {\n        this._routes.set(route.method, []);\n      } // Give precedence to all of the earlier routes by adding this additional\n      // route to the end of the array.\n\n\n      this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n\n  }, {\n    key: \"unregisterRoute\",\n    value: function unregisterRoute(route) {\n      if (!this._routes.has(route.method)) {\n        throw new WorkboxError('unregister-route-but-not-found-with-method', {\n          method: route.method\n        });\n      }\n\n      var routeIndex = this._routes.get(route.method).indexOf(route);\n\n      if (routeIndex > -1) {\n        this._routes.get(route.method).splice(routeIndex, 1);\n      } else {\n        throw new WorkboxError('unregister-route-route-not-registered');\n      }\n    }\n  }]);\n\n  return Router;\n}();\n\nexport { Router };","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/workbox-routing/Router.js"],"names":["assert","getFriendlyURL","defaultMethod","logger","normalizeHandler","WorkboxError","Router","_routes","Map","_defaultHandlerMap","self","addEventListener","event","request","responsePromise","handleRequest","respondWith","data","type","payload","process","env","NODE_ENV","debug","urlsToCache","requestPromises","Promise","all","map","entry","Request","waitUntil","ports","then","postMessage","isInstance","moduleName","className","funcName","paramName","url","URL","location","href","protocol","startsWith","sameOrigin","origin","findMatchingRoute","params","route","handler","debugMessages","push","method","has","get","groupCollapsed","forEach","msg","Array","isArray","log","groupEnd","handle","err","reject","catchHandler","_catchHandler","catch","error","routes","matchResult","match","warn","length","undefined","constructor","Object","keys","set","isType","hasMethod","routeIndex","indexOf","splice"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a FetchEvent through one or more\n * [Routes]{@link module:workbox-routing.Route} responding  with a Request if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof module:workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<module:workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([\n                    `Found a route to handle this request:`, route,\n                ]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`, params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        err = catchErr;\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do. \n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                params = matchResult;\n                if (Array.isArray(matchResult) && matchResult.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if ((matchResult.constructor === Object &&\n                    Object.keys(matchResult).length === 0)) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {module:workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {module:workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n"]},"metadata":{},"sourceType":"module"}