{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport API from '../../lib/API';\nconst initialState = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null\n  },\n  data: {\n    post: {},\n    comments: []\n  }\n};\nexport const getPost = createAsyncThunk('post/getPost', async ([subreddit, id]) => {\n  const response = await API.getPostWithComments([subreddit, id]);\n  return response;\n});\nconst postSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getPost.pending)]: state => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getPost.fulfilled)]: (state, {\n      payload\n    }) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.data.post = payload.post;\n      state.data.comments = payload.comments;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getPost.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    }\n  }\n});\nexport default postSlice.reducer;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient2/src/features/post/postSlice.ts"],"names":["createSlice","createAsyncThunk","API","initialState","status","error","isLoading","isError","page","before","after","data","post","comments","getPost","subreddit","id","response","getPostWithComments","postSlice","name","reducers","extraReducers","String","pending","state","fulfilled","payload","rejected","action","message","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAqCC,gBAArC,QAA6D,kBAA7D;AAEA,OAAOC,GAAP,MAAgB,eAAhB;AAaA,MAAMC,YAAmB,GAAG;AAC1BC,EAAAA,MAAM,EAAE,MADkB;AAE1BC,EAAAA,KAAK,EAAE,IAFmB;AAG1BC,EAAAA,SAAS,EAAE,IAHe;AAI1BC,EAAAA,OAAO,EAAE,KAJiB;AAK1BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,IADJ;AAEJC,IAAAA,KAAK,EAAE;AAFH,GALoB;AAS1BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE,EADF;AAEJC,IAAAA,QAAQ,EAAE;AAFN;AAToB,CAA5B;AAeA,OAAO,MAAMC,OAAO,GAAGb,gBAAgB,CACrC,cADqC,EAErC,OAAO,CAACc,SAAD,EAAYC,EAAZ,CAAP,KAAqC;AACnC,QAAMC,QAAmB,GAAG,MAAMf,GAAG,CAACgB,mBAAJ,CAAwB,CAACH,SAAD,EAAYC,EAAZ,CAAxB,CAAlC;AAEA,SAAOC,QAAP;AACD,CANoC,CAAhC;AASP,MAAME,SAAS,GAAGnB,WAAW,CAAC;AAC5BoB,EAAAA,IAAI,EAAE,MADsB;AAE5BjB,EAAAA,YAF4B;AAG5BkB,EAAAA,QAAQ,EAAE,EAHkB;AAI5BC,EAAAA,aAAa,EAAE;AACb,KAACC,MAAM,CAACT,OAAO,CAACU,OAAT,CAAP,GAA4BC,KAAD,IAAW;AACpCA,MAAAA,KAAK,CAACrB,MAAN,GAAe,SAAf;AACAqB,MAAAA,KAAK,CAACnB,SAAN,GAAkB,IAAlB;AACD,KAJY;AAKb,KAACiB,MAAM,CAACT,OAAO,CAACY,SAAT,CAAP,GAA6B,CAC3BD,KAD2B,EAE3B;AAAEE,MAAAA;AAAF,KAF2B,KAGxB;AACHF,MAAAA,KAAK,CAACrB,MAAN,GAAe,WAAf;AACAqB,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACnB,SAAN,GAAkB,KAAlB;AACAmB,MAAAA,KAAK,CAACd,IAAN,CAAWC,IAAX,GAAkBe,OAAO,CAACf,IAA1B;AACAa,MAAAA,KAAK,CAACd,IAAN,CAAWE,QAAX,GAAsBc,OAAO,CAACd,QAA9B;AACAY,MAAAA,KAAK,CAACjB,IAAN,CAAWE,KAAX,GAAmBiB,OAAO,CAACjB,KAA3B;AACAe,MAAAA,KAAK,CAACjB,IAAN,CAAWC,MAAX,GAAoBkB,OAAO,CAAClB,MAA5B;AACD,KAhBY;AAiBb,KAACc,MAAM,CAACT,OAAO,CAACc,QAAT,CAAP,GAA4B,CAACH,KAAD,EAAQI,MAAR,KAAmB;AAC7CJ,MAAAA,KAAK,CAACrB,MAAN,GAAe,QAAf;AACAqB,MAAAA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;AACAkB,MAAAA,KAAK,CAACnB,SAAN,GAAkB,KAAlB;AACAmB,MAAAA,KAAK,CAACpB,KAAN,GAAcwB,MAAM,CAACxB,KAAP,CAAayB,OAA3B;AACD;AAtBY;AAJa,CAAD,CAA7B;AA8BA,eAAeX,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch, TPost } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPost extends IFetch {\n  data: TPost;\n}\n\ntype TResponse = {\n  post: object;\n  comments: object[];\n  after: string;\n  before: string;\n};\n\nconst initialState: IPost = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  data: {\n    post: {},\n    comments: [],\n  },\n};\n\nexport const getPost = createAsyncThunk(\n  'post/getPost',\n  async ([subreddit, id]: string[]) => {\n    const response: TResponse = await API.getPostWithComments([subreddit, id]);\n\n    return response;\n  },\n);\n\nconst postSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getPost.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getPost.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<TResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.data.post = payload.post;\n      state.data.comments = payload.comments;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getPost.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default postSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}