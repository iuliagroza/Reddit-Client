{"ast":null,"code":"import _slicedToArray from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{useDispatch,useSelector}from'react-redux';var getDependency=function getDependency(value){var newValue;if(Array.isArray(value)){var _value=_slicedToArray(value,1);newValue=_value[0];}else{newValue=value;}return newValue;};var useFetch=function useFetch(args){var action=args.action,_args$params=args.params,params=_args$params===void 0?'':_args$params;var dispatch=useDispatch();var getState=useSelector(function(state){return state;});var update=getDependency(params);React.useEffect(function(){dispatch(action(params));},[dispatch,update]);return getState;};export default useFetch;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/hooks/useFetch.ts"],"names":["React","useDispatch","useSelector","getDependency","value","newValue","Array","isArray","useFetch","args","action","params","dispatch","getState","state","update","useEffect"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAUA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAA4B,CAChD,GAAIC,CAAAA,QAAJ,CACA,GAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,CAA0B,2BACXA,KADW,IACvBC,QADuB,WAEzB,CAFD,IAEO,CACLA,QAAQ,CAAGD,KAAX,CACD,CAED,MAAOC,CAAAA,QAAP,CACD,CATD,CAWA,GAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAkB,CACjC,GAAQC,CAAAA,MAAR,CAAgCD,IAAhC,CAAQC,MAAR,cAAgCD,IAAhC,CAAgBE,MAAhB,CAAgBA,MAAhB,uBAAyB,EAAzB,cACA,GAAMC,CAAAA,QAAQ,CAAGX,WAAW,EAA5B,CACA,GAAMY,CAAAA,QAAQ,CAAGX,WAAW,CAAC,SAACY,KAAD,QAAsBA,CAAAA,KAAtB,EAAD,CAA5B,CACA,GAAMC,CAAAA,MAAM,CAAGZ,aAAa,CAACQ,MAAD,CAA5B,CAEAX,KAAK,CAACgB,SAAN,CAAgB,UAAM,CACpBJ,QAAQ,CAACF,MAAM,CAACC,MAAD,CAAP,CAAR,CACD,CAFD,CAEG,CAACC,QAAD,CAAWG,MAAX,CAFH,EAIA,MAAOF,CAAAA,QAAP,CACD,CAXD,CAaA,cAAeL,CAAAA,QAAf","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store/rootReducer';\n\ntype TParams = string | string[];\n\ntype TFetch = {\n  action: (...args: string[] | any) => void;\n  params?: TParams;\n};\n\nconst getDependency = (value: TParams): string => {\n  let newValue;\n  if (Array.isArray(value)) {\n    [newValue] = value;\n  } else {\n    newValue = value;\n  }\n\n  return newValue;\n};\n\nconst useFetch = (args: TFetch) => {\n  const { action, params = '' } = args;\n  const dispatch = useDispatch();\n  const getState = useSelector((state: RootState) => state);\n  const update = getDependency(params);\n\n  React.useEffect(() => {\n    dispatch(action(params));\n  }, [dispatch, update]);\n\n  return getState;\n};\n\nexport default useFetch;\n"]},"metadata":{},"sourceType":"module"}