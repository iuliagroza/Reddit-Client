{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\Info\\\\Projects\\\\RedditClient\\\\src\\\\components\\\\Card\\\\subredditCard\\\\index.tsx\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles, Card, CardHeader, CardMedia, CardActions, CardContent, Button, Typography, Avatar, Chip } from '@material-ui/core';\nimport ReplyAllIcon from '@material-ui/icons/ReplyAll';\nimport subredditCardStyles from './subredditCard.styles';\nimport { fd } from '../../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SubredditCard = ({\n  classes,\n  data\n}) => {\n  if (!data) return null;\n  const shortDescription = data.public_description || data.description.split('\\n')[0];\n  const headerPreview = data.banner_img || `${process.env.PUBLIC_URL}/images/subreddit_placeholder.png`;\n  const timeSinceCreated = fd.getTimeFromNow(data.created_utc, true);\n  const formatedSubscribers = fd.shortenLargeNumber(data.subscribers);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n        \"aria-label\": \"recipe\",\n        src: data.icon_img,\n        alt: data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this),\n      title: data.display_name_prefixed,\n      subheader: `a community for ${timeSinceCreated}`,\n      component: Link,\n      to: `/subreddit/${data.display_name}`,\n      className: classes.header\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardMedia, {\n      className: classes.media,\n      image: headerPreview,\n      title: data.title,\n      component: Link,\n      to: `/subreddit/${data.display_name}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Chip, {\n        variant: \"outlined\",\n        color: \"primary\",\n        label: `${formatedSubscribers} subscribers`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.body,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h2\",\n          children: data.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          component: \"p\",\n          children: shortDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n      disableSpacing: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        \"aria-label\": \"browse subreddit\",\n        startIcon: /*#__PURE__*/_jsxDEV(ReplyAllIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 22\n        }, this),\n        component: Link,\n        to: `/subreddit/${data.display_name}`,\n        children: \"Browse subreddit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SubredditCard;\nexport default withStyles(subredditCardStyles)(SubredditCard);\n\nvar _c;\n\n$RefreshReg$(_c, \"SubredditCard\");","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/components/Card/subredditCard/index.tsx"],"names":["React","Link","withStyles","Card","CardHeader","CardMedia","CardActions","CardContent","Button","Typography","Avatar","Chip","ReplyAllIcon","subredditCardStyles","fd","SubredditCard","classes","data","shortDescription","public_description","description","split","headerPreview","banner_img","process","env","PUBLIC_URL","timeSinceCreated","getTimeFromNow","created_utc","formatedSubscribers","shortenLargeNumber","subscribers","root","icon_img","title","display_name_prefixed","display_name","header","media","body"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  withStyles,\n  Card,\n  CardHeader,\n  CardMedia,\n  CardActions,\n  CardContent,\n  Button,\n  Typography,\n  Avatar,\n  Chip,\n} from '@material-ui/core';\nimport ReplyAllIcon from '@material-ui/icons/ReplyAll';\nimport subredditCardStyles, { StyleProps } from './subredditCard.styles';\nimport { fd } from '../../../helpers';\n\nexport type TSubredditData = {\n  title: string;\n  display_name: string;\n  display_name_prefixed: string;\n  primary_color: string;\n  key_color: string;\n  description: string;\n  public_description: string;\n  subscribers: string;\n  header_title: string;\n  banner_img: string;\n  icon_img: string;\n  url: string;\n  created_utc: number;\n};\n\nexport type SubredditDataProps = {\n  data?: TSubredditData;\n};\n\nconst SubredditCard: React.FC<StyleProps & SubredditDataProps> = ({\n  classes,\n  data,\n}): React.ReactElement | null => {\n  if (!data) return null;\n\n  const shortDescription =\n    data.public_description || data.description.split('\\n')[0];\n\n  const headerPreview =\n    data.banner_img ||\n    `${process.env.PUBLIC_URL}/images/subreddit_placeholder.png`;\n\n  const timeSinceCreated = fd.getTimeFromNow(data.created_utc, true);\n  const formatedSubscribers = fd.shortenLargeNumber(data.subscribers);\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        avatar={\n          <Avatar aria-label=\"recipe\" src={data.icon_img} alt={data.title} />\n        }\n        title={data.display_name_prefixed}\n        subheader={`a community for ${timeSinceCreated}`}\n        component={Link}\n        to={`/subreddit/${data.display_name}`}\n        className={classes.header}\n      />\n      <CardMedia\n        className={classes.media}\n        image={headerPreview}\n        title={data.title}\n        component={Link}\n        to={`/subreddit/${data.display_name}`}\n      />\n      <CardContent>\n        <Chip\n          variant=\"outlined\"\n          color=\"primary\"\n          label={`${formatedSubscribers} subscribers`}\n        />\n        <div className={classes.body}>\n          <Typography variant=\"h5\" component=\"h2\">\n            {data.title}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            {shortDescription}\n          </Typography>\n        </div>\n      </CardContent>\n      <CardActions disableSpacing>\n        <Button\n          aria-label=\"browse subreddit\"\n          startIcon={<ReplyAllIcon />}\n          component={Link}\n          to={`/subreddit/${data.display_name}`}\n        >\n          Browse subreddit\n        </Button>\n      </CardActions>\n    </Card>\n  );\n};\n\nexport default withStyles(subredditCardStyles)(SubredditCard);\n"]},"metadata":{},"sourceType":"module"}