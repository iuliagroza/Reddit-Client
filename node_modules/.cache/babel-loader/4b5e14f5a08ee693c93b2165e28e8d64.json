{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\n\nvar PrecacheCacheKeyPlugin = function PrecacheCacheKeyPlugin(_ref) {\n  var _this = this;\n\n  var precacheController = _ref.precacheController;\n\n  _classCallCheck(this, PrecacheCacheKeyPlugin);\n\n  this.cacheKeyWillBeUsed = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var request, params, cacheKey;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              request = _ref2.request, params = _ref2.params;\n              cacheKey = params && params.cacheKey || _this._precacheController.getCacheKeyForURL(request.url);\n              return _context.abrupt(\"return\", cacheKey ? new Request(cacheKey) : request);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  this._precacheController = precacheController;\n};\n\nexport { PrecacheCacheKeyPlugin };","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/workbox-precaching/utils/PrecacheCacheKeyPlugin.js"],"names":["PrecacheCacheKeyPlugin","precacheController","cacheKeyWillBeUsed","request","params","cacheKey","_precacheController","getCacheKeyForURL","url","Request"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAP;AACA;AACA;AACA;AACA;AACA;AACA;;IACMA,sB,GACF,sCAAoC;AAAA;;AAAA,MAAtBC,kBAAsB,QAAtBA,kBAAsB;;AAAA;;AAChC,OAAKC,kBAAL;AAAA,yEAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,cAAAA,OAAT,SAASA,OAAT,EAAkBC,MAAlB,SAAkBA,MAAlB;AAChBC,cAAAA,QADgB,GACLD,MAAM,IAAIA,MAAM,CAACC,QAAjB,IACb,KAAI,CAACC,mBAAL,CAAyBC,iBAAzB,CAA2CJ,OAAO,CAACK,GAAnD,CAFkB;AAAA,+CAGfH,QAAQ,GAAG,IAAII,OAAJ,CAAYJ,QAAZ,CAAH,GAA2BF,OAHpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1B;;AAAA;AAAA;AAAA;AAAA;;AAKA,OAAKG,mBAAL,GAA2BL,kBAA3B;AACH,C;;AAEL,SAASD,sBAAT","sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A plugin, designed to be used with PrecacheController, to translate URLs into\n * the corresponding cache key, based on the current revision info.\n *\n * @private\n */\nclass PrecacheCacheKeyPlugin {\n    constructor({ precacheController }) {\n        this.cacheKeyWillBeUsed = async ({ request, params, }) => {\n            const cacheKey = params && params.cacheKey ||\n                this._precacheController.getCacheKeyForURL(request.url);\n            return cacheKey ? new Request(cacheKey) : request;\n        };\n        this._precacheController = precacheController;\n    }\n}\nexport { PrecacheCacheKeyPlugin };\n"]},"metadata":{},"sourceType":"module"}