{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport API from '../../lib/API';\nexport const getSubreddits = createAsyncThunk('subreddits/getSubreddits', async () => {\n  const response = await API.getAllSubreddits();\n  return response;\n});\nconst initialState = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null\n  },\n  subreddits: []\n};\nconst subredditsSlice = createSlice({\n  name: 'subreddits',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getSubreddits.pending)]: state => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubreddits.fulfilled)]: (state, {\n      payload\n    }) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.subreddits = payload.subreddits;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getSubreddits.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    }\n  }\n});\nexport default subredditsSlice.reducer;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/features/subreddits/subredditsSlice.ts"],"names":["createSlice","createAsyncThunk","API","getSubreddits","response","getAllSubreddits","initialState","status","error","isLoading","isError","page","before","after","subreddits","subredditsSlice","name","reducers","extraReducers","String","pending","state","fulfilled","payload","rejected","action","message","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAqCC,gBAArC,QAA6D,kBAA7D;AAEA,OAAOC,GAAP,MAAgB,eAAhB;AAYA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAC3C,0BAD2C,EAE3C,YAAY;AACV,QAAMG,QAAmB,GAAG,MAAMF,GAAG,CAACG,gBAAJ,EAAlC;AAEA,SAAOD,QAAP;AACD,CAN0C,CAAtC;AASP,MAAME,YAAoB,GAAG;AAC3BC,EAAAA,MAAM,EAAE,MADmB;AAE3BC,EAAAA,KAAK,EAAE,IAFoB;AAG3BC,EAAAA,SAAS,EAAE,IAHgB;AAI3BC,EAAAA,OAAO,EAAE,KAJkB;AAK3BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,MAAM,EAAE,IADJ;AAEJC,IAAAA,KAAK,EAAE;AAFH,GALqB;AAS3BC,EAAAA,UAAU,EAAE;AATe,CAA7B;AAYA,MAAMC,eAAe,GAAGf,WAAW,CAAC;AAClCgB,EAAAA,IAAI,EAAE,YAD4B;AAElCV,EAAAA,YAFkC;AAGlCW,EAAAA,QAAQ,EAAE,EAHwB;AAIlCC,EAAAA,aAAa,EAAE;AACb,KAACC,MAAM,CAAChB,aAAa,CAACiB,OAAf,CAAP,GAAkCC,KAAD,IAAW;AAC1CA,MAAAA,KAAK,CAACd,MAAN,GAAe,SAAf;AACAc,MAAAA,KAAK,CAACZ,SAAN,GAAkB,IAAlB;AACD,KAJY;AAKb,KAACU,MAAM,CAAChB,aAAa,CAACmB,SAAf,CAAP,GAAmC,CACjCD,KADiC,EAEjC;AAAEE,MAAAA;AAAF,KAFiC,KAG9B;AACHF,MAAAA,KAAK,CAACd,MAAN,GAAe,WAAf;AACAc,MAAAA,KAAK,CAACX,OAAN,GAAgB,KAAhB;AACAW,MAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACAY,MAAAA,KAAK,CAACP,UAAN,GAAmBS,OAAO,CAACT,UAA3B;AACAO,MAAAA,KAAK,CAACV,IAAN,CAAWE,KAAX,GAAmBU,OAAO,CAACV,KAA3B;AACAQ,MAAAA,KAAK,CAACV,IAAN,CAAWC,MAAX,GAAoBW,OAAO,CAACX,MAA5B;AACD,KAfY;AAgBb,KAACO,MAAM,CAAChB,aAAa,CAACqB,QAAf,CAAP,GAAkC,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACnDJ,MAAAA,KAAK,CAACd,MAAN,GAAe,QAAf;AACAc,MAAAA,KAAK,CAACX,OAAN,GAAgB,IAAhB;AACAW,MAAAA,KAAK,CAACZ,SAAN,GAAkB,KAAlB;AACAY,MAAAA,KAAK,CAACb,KAAN,GAAciB,MAAM,CAACjB,KAAP,CAAakB,OAA3B;AACD;AArBY;AAJmB,CAAD,CAAnC;AA6BA,eAAeX,eAAe,CAACY,OAA/B","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPosts extends IFetch {\n  subreddits: object[];\n}\n\ntype TResponse = {\n  subreddits: object[];\n  after: string;\n  before: string;\n};\n\nexport const getSubreddits = createAsyncThunk(\n  'subreddits/getSubreddits',\n  async () => {\n    const response: TResponse = await API.getAllSubreddits();\n\n    return response;\n  },\n);\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  subreddits: [],\n};\n\nconst subredditsSlice = createSlice({\n  name: 'subreddits',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getSubreddits.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubreddits.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<TResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.subreddits = payload.subreddits;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getSubreddits.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default subredditsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}