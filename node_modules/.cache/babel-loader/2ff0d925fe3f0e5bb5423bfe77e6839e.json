{"ast":null,"code":"/* eslint-disable no-restricted-properties */\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime'; // Formateaza datele de timp si numere preluate din JSON-uri\n\ndayjs.extend(relativeTime);\n\nconst shortenLargeNumber = (value, digits) => {\n  if (typeof value === 'string') value = Number(value);\n  if (!digits) digits = 1;\n  const units = ['k', 'M', 'G', 'T'];\n  let decimal;\n\n  for (let i = units.length - 1; i >= 0; i -= 1) {\n    decimal = Math.pow(1000, i + 1);\n\n    if (value <= -decimal || value >= decimal) {\n      return +(value / decimal).toFixed(digits) + units[i];\n    }\n  }\n\n  return value;\n};\n\nconst addNumberSeparator = (value, separator) => {\n  if (typeof value === 'number') value = String(value);\n  if (!separator) separator = '.';\n  return value.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, `$1${separator}`);\n};\n\nconst getTimeFromNow = (value, option) => {\n  if (!option) option = false;\n  return dayjs.unix(Number(value)).fromNow(option);\n};\n\nconst getCreatedTime = (value, options = 'MMMM D, YYYY') => {\n  return dayjs.unix(value).format(options);\n};\n\nexport default {\n  shortenLargeNumber,\n  getTimeFromNow,\n  getCreatedTime,\n  addNumberSeparator\n};","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/helpers/formatData.ts"],"names":["dayjs","relativeTime","extend","shortenLargeNumber","value","digits","Number","units","decimal","i","length","Math","pow","toFixed","addNumberSeparator","separator","String","replace","getTimeFromNow","option","unix","fromNow","getCreatedTime","options","format"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,2BAAzB,C,CAEA;;AAEAD,KAAK,CAACE,MAAN,CAAaD,YAAb;;AAEA,MAAME,kBAAkB,GAAG,CACzBC,KADyB,EAEzBC,MAFyB,KAGtB;AACH,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+BA,KAAK,GAAGE,MAAM,CAACF,KAAD,CAAd;AAC/B,MAAI,CAACC,MAAL,EAAaA,MAAM,GAAG,CAAT;AAEb,QAAME,KAAK,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAd;AACA,MAAIC,OAAJ;;AAEA,OAAK,IAAIC,CAAC,GAAGF,KAAK,CAACG,MAAN,GAAe,CAA5B,EAA+BD,CAAC,IAAI,CAApC,EAAuCA,CAAC,IAAI,CAA5C,EAA+C;AAC7CD,IAAAA,OAAO,GAAGG,IAAI,CAACC,GAAL,CAAS,IAAT,EAAeH,CAAC,GAAG,CAAnB,CAAV;;AAEA,QAAIL,KAAK,IAAI,CAACI,OAAV,IAAqBJ,KAAK,IAAII,OAAlC,EAA2C;AACzC,aAAO,CAAC,CAACJ,KAAK,GAAGI,OAAT,EAAkBK,OAAlB,CAA0BR,MAA1B,CAAD,GAAqCE,KAAK,CAACE,CAAD,CAAjD;AACD;AACF;;AAED,SAAOL,KAAP;AACD,CAnBD;;AAqBA,MAAMU,kBAAkB,GAAG,CACzBV,KADyB,EAEzBW,SAFyB,KAGd;AACX,MAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+BA,KAAK,GAAGY,MAAM,CAACZ,KAAD,CAAd;AAC/B,MAAI,CAACW,SAAL,EAAgBA,SAAS,GAAG,GAAZ;AAEhB,SAAOX,KAAK,CAACa,OAAN,CAAc,0BAAd,EAA2C,KAAIF,SAAU,EAAzD,CAAP;AACD,CARD;;AAUA,MAAMG,cAAc,GAAG,CACrBd,KADqB,EAErBe,MAFqB,KAGlB;AACH,MAAI,CAACA,MAAL,EAAaA,MAAM,GAAG,KAAT;AACb,SAAOnB,KAAK,CAACoB,IAAN,CAAWd,MAAM,CAACF,KAAD,CAAjB,EAA0BiB,OAA1B,CAAkCF,MAAlC,CAAP;AACD,CAND;;AAQA,MAAMG,cAAc,GAAG,CAAClB,KAAD,EAAgBmB,OAAe,GAAG,cAAlC,KAAqD;AAC1E,SAAOvB,KAAK,CAACoB,IAAN,CAAWhB,KAAX,EAAkBoB,MAAlB,CAAyBD,OAAzB,CAAP;AACD,CAFD;;AAIA,eAAe;AACbpB,EAAAA,kBADa;AAEbe,EAAAA,cAFa;AAGbI,EAAAA,cAHa;AAIbR,EAAAA;AAJa,CAAf","sourcesContent":["/* eslint-disable no-restricted-properties */\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\n\n// Formateaza datele de timp si numere preluate din JSON-uri\n\ndayjs.extend(relativeTime);\n\nconst shortenLargeNumber = (\n  value: number | string,\n  digits?: number | undefined | null,\n) => {\n  if (typeof value === 'string') value = Number(value);\n  if (!digits) digits = 1;\n\n  const units = ['k', 'M', 'G', 'T'];\n  let decimal;\n\n  for (let i = units.length - 1; i >= 0; i -= 1) {\n    decimal = Math.pow(1000, i + 1);\n\n    if (value <= -decimal || value >= decimal) {\n      return +(value / decimal).toFixed(digits) + units[i];\n    }\n  }\n\n  return value;\n};\n\nconst addNumberSeparator = (\n  value: string | number,\n  separator?: string | null,\n): string => {\n  if (typeof value === 'number') value = String(value);\n  if (!separator) separator = '.';\n\n  return value.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, `$1${separator}`);\n};\n\nconst getTimeFromNow = (\n  value: string | number,\n  option?: boolean | null | undefined,\n) => {\n  if (!option) option = false;\n  return dayjs.unix(Number(value)).fromNow(option);\n};\n\nconst getCreatedTime = (value: number, options: string = 'MMMM D, YYYY') => {\n  return dayjs.unix(value).format(options);\n};\n\nexport default {\n  shortenLargeNumber,\n  getTimeFromNow,\n  getCreatedTime,\n  addNumberSeparator,\n};\n"]},"metadata":{},"sourceType":"module"}