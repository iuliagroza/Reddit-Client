{"ast":null,"code":"import _defineProperty from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _extraReducers;import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import API from'../../lib/API';export var getAllPosts=createAsyncThunk('posts/getAllPosts',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return API.getAllPosts('',params);case 2:response=_context.sent;return _context.abrupt(\"return\",response);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());var initialState={status:'idle',error:null,isLoading:true,isError:false,page:{before:null,after:null},posts:[]};var postsSlice=createSlice({name:'posts',initialState:initialState,reducers:{},extraReducers:(_extraReducers={},_defineProperty(_extraReducers,String(getAllPosts.pending),function(state){state.status='pending';state.isLoading=true;}),_defineProperty(_extraReducers,String(getAllPosts.fulfilled),function(state,_ref2){var payload=_ref2.payload;state.status='succeeded';state.isError=false;state.isLoading=false;state.posts=payload.posts;state.page.after=payload.after;state.page.before=payload.before;}),_defineProperty(_extraReducers,String(getAllPosts.rejected),function(state,action){state.status='failed';state.isError=true;state.isLoading=false;state.error=action.error.message;}),_extraReducers)});export default postsSlice.reducer;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/features/posts/postsSlice.ts"],"names":["createSlice","createAsyncThunk","API","getAllPosts","params","response","initialState","status","error","isLoading","isError","page","before","after","posts","postsSlice","name","reducers","extraReducers","String","pending","state","fulfilled","payload","rejected","action","message","reducer"],"mappings":"ugBAAA,OAASA,WAAT,CAAqCC,gBAArC,KAA6D,kBAA7D,CAEA,MAAOC,CAAAA,GAAP,KAAgB,eAAhB,CAYA,MAAO,IAAMC,CAAAA,WAAW,CAAGF,gBAAgB,CACzC,mBADyC,0FAEzC,iBAAOG,MAAP,qJACoCF,CAAAA,GAAG,CAACC,WAAJ,CAAgB,EAAhB,CAAoBC,MAApB,CADpC,QACQC,QADR,+CAGSA,QAHT,wDAFyC,+DAApC,CASP,GAAMC,CAAAA,YAAoB,CAAG,CAC3BC,MAAM,CAAE,MADmB,CAE3BC,KAAK,CAAE,IAFoB,CAG3BC,SAAS,CAAE,IAHgB,CAI3BC,OAAO,CAAE,KAJkB,CAK3BC,IAAI,CAAE,CACJC,MAAM,CAAE,IADJ,CAEJC,KAAK,CAAE,IAFH,CALqB,CAS3BC,KAAK,CAAE,EAToB,CAA7B,CAYA,GAAMC,CAAAA,UAAU,CAAGf,WAAW,CAAC,CAC7BgB,IAAI,CAAE,OADuB,CAE7BV,YAAY,CAAZA,YAF6B,CAG7BW,QAAQ,CAAE,EAHmB,CAI7BC,aAAa,mDACVC,MAAM,CAAChB,WAAW,CAACiB,OAAb,CADI,CACoB,SAACC,KAAD,CAAW,CACxCA,KAAK,CAACd,MAAN,CAAe,SAAf,CACAc,KAAK,CAACZ,SAAN,CAAkB,IAAlB,CACD,CAJU,iCAKVU,MAAM,CAAChB,WAAW,CAACmB,SAAb,CALI,CAKsB,SAC/BD,KAD+B,OAG5B,IADDE,CAAAA,OACC,OADDA,OACC,CACHF,KAAK,CAACd,MAAN,CAAe,WAAf,CACAc,KAAK,CAACX,OAAN,CAAgB,KAAhB,CACAW,KAAK,CAACZ,SAAN,CAAkB,KAAlB,CACAY,KAAK,CAACP,KAAN,CAAcS,OAAO,CAACT,KAAtB,CACAO,KAAK,CAACV,IAAN,CAAWE,KAAX,CAAmBU,OAAO,CAACV,KAA3B,CACAQ,KAAK,CAACV,IAAN,CAAWC,MAAX,CAAoBW,OAAO,CAACX,MAA5B,CACD,CAfU,iCAgBVO,MAAM,CAAChB,WAAW,CAACqB,QAAb,CAhBI,CAgBqB,SAACH,KAAD,CAAQI,MAAR,CAAmB,CACjDJ,KAAK,CAACd,MAAN,CAAe,QAAf,CACAc,KAAK,CAACX,OAAN,CAAgB,IAAhB,CACAW,KAAK,CAACZ,SAAN,CAAkB,KAAlB,CACAY,KAAK,CAACb,KAAN,CAAciB,MAAM,CAACjB,KAAP,CAAakB,OAA3B,CACD,CArBU,iBAJgB,CAAD,CAA9B,CA6BA,cAAeX,CAAAA,UAAU,CAACY,OAA1B","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPosts extends IFetch {\n  posts: object[];\n}\n\ntype TResponse = {\n  posts: object[];\n  after: string;\n  before: string;\n};\n\nexport const getAllPosts = createAsyncThunk(\n  'posts/getAllPosts',\n  async (params: string) => {\n    const response: TResponse = await API.getAllPosts('', params);\n\n    return response;\n  },\n);\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  posts: [],\n};\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getAllPosts.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getAllPosts.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<TResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.posts = payload.posts;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getAllPosts.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default postsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}