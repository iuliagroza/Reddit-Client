{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\Info\\\\Projects\\\\RedditClient2\\\\src\\\\theme\\\\index.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport { createMuiTheme, ThemeProvider, CssBaseline } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport darkTheme from './dark';\nimport lightTheme from './light';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// TODO: Find out a way to make themeMode work without having to pass the object type\nconst themeConstructor = () => {\n  _s();\n\n  const {\n    lightMode\n  } = useSelector(state => state.theme);\n  const themeBasedOnMode = lightMode ? lightTheme : darkTheme;\n  return createMuiTheme({ ...themeBasedOnMode,\n    breakpoints: {\n      values: {\n        xs: 0,\n        xxs: 450,\n        sm: 600,\n        md: 960,\n        lg: 1280,\n        xl: 1920\n      }\n    },\n    overrides: {\n      MuiCssBaseline: {\n        '@global': {\n          html: {\n            WebkitFontSmoothing: 'auto',\n            margin: 0,\n            padding: 0\n          }\n        }\n      }\n    }\n  });\n};\n\n_s(themeConstructor, \"+kkw1IP3ZW5Jwc5RzcjXFaI0Yq4=\", false, function () {\n  return [useSelector];\n});\n\nconst ThemeProviderWithMode = ({\n  children\n}) => {\n  const theme = themeConstructor();\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ThemeProviderWithMode;\nexport default ThemeProviderWithMode;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProviderWithMode\");","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient2/src/theme/index.tsx"],"names":["React","createMuiTheme","ThemeProvider","CssBaseline","useSelector","darkTheme","lightTheme","themeConstructor","lightMode","state","theme","themeBasedOnMode","breakpoints","values","xs","xxs","sm","md","lg","xl","overrides","MuiCssBaseline","html","WebkitFontSmoothing","margin","padding","ThemeProviderWithMode","children"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,aAFF,EAGEC,WAHF,QAKO,mBALP;AAMA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,SAAP,MAAsB,QAAtB;AACA,OAAOC,UAAP,MAAuB,SAAvB;;;AA6BA;AACA,MAAMC,gBAAgB,GAAG,MAAa;AAAA;;AACpC,QAAM;AAAEC,IAAAA;AAAF,MAAgBJ,WAAW,CAAEK,KAAD,IAAsBA,KAAK,CAACC,KAA7B,CAAjC;AACA,QAAMC,gBAAwB,GAAGH,SAAS,GAAGF,UAAH,GAAgBD,SAA1D;AAEA,SAAOJ,cAAc,CAAC,EACpB,GAAGU,gBADiB;AAEpBC,IAAAA,WAAW,EAAE;AACXC,MAAAA,MAAM,EAAE;AACNC,QAAAA,EAAE,EAAE,CADE;AAENC,QAAAA,GAAG,EAAE,GAFC;AAGNC,QAAAA,EAAE,EAAE,GAHE;AAINC,QAAAA,EAAE,EAAE,GAJE;AAKNC,QAAAA,EAAE,EAAE,IALE;AAMNC,QAAAA,EAAE,EAAE;AANE;AADG,KAFO;AAYpBC,IAAAA,SAAS,EAAE;AACTC,MAAAA,cAAc,EAAE;AACd,mBAAW;AACTC,UAAAA,IAAI,EAAE;AACJC,YAAAA,mBAAmB,EAAE,MADjB;AAEJC,YAAAA,MAAM,EAAE,CAFJ;AAGJC,YAAAA,OAAO,EAAE;AAHL;AADG;AADG;AADP;AAZS,GAAD,CAArB;AAwBD,CA5BD;;GAAMlB,gB;UACkBH,W;;;AA6BxB,MAAMsB,qBAAsC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/D,QAAMjB,KAAK,GAAGH,gBAAgB,EAA9B;AAEA,sBACE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAEG,KAAtB;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGiB,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CATD;;KAAMD,qB;AAWN,eAAeA,qBAAf","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React from 'react';\nimport {\n  createMuiTheme,\n  ThemeProvider,\n  CssBaseline,\n  Theme,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../store/rootReducer';\nimport darkTheme from './dark';\nimport lightTheme from './light';\n\ndeclare module '@material-ui/core/styles/createPalette' {\n  interface Palette {\n    clrAccent: React.CSSProperties['color'];\n    clrHover: {\n      main: React.CSSProperties['color'];\n    };\n    clrReddit: React.CSSProperties['color'];\n  }\n  interface PaletteOptions {\n    clrAccent: React.CSSProperties['color'];\n    clrHover: {\n      main: React.CSSProperties['color'];\n    };\n    clrReddit: React.CSSProperties['color'];\n  }\n}\n\ndeclare module '@material-ui/core/styles/createBreakpoints' {\n  interface BreakpointOverrides {\n    xxs: true;\n  }\n}\n\ntype Props = {\n  children: React.ReactNode;\n};\n\n// TODO: Find out a way to make themeMode work without having to pass the object type\nconst themeConstructor = (): Theme => {\n  const { lightMode } = useSelector((state: RootState) => state.theme);\n  const themeBasedOnMode: object = lightMode ? lightTheme : darkTheme;\n\n  return createMuiTheme({\n    ...themeBasedOnMode,\n    breakpoints: {\n      values: {\n        xs: 0,\n        xxs: 450,\n        sm: 600,\n        md: 960,\n        lg: 1280,\n        xl: 1920,\n      },\n    },\n    overrides: {\n      MuiCssBaseline: {\n        '@global': {\n          html: {\n            WebkitFontSmoothing: 'auto',\n            margin: 0,\n            padding: 0,\n          },\n        },\n      },\n    },\n  });\n};\n\nconst ThemeProviderWithMode: React.FC<Props> = ({ children }) => {\n  const theme = themeConstructor();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      {children}\n    </ThemeProvider>\n  );\n};\n\nexport default ThemeProviderWithMode;\n"]},"metadata":{},"sourceType":"module"}