{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\Info\\\\Projects\\\\RedditClient\\\\src\\\\components\\\\SearchBar\\\\index.tsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable consistent-return */\nimport React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { withStyles, CircularProgress, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match'; // import debounce from 'lodash/debounce';\n\nimport searchStyles from './searchBar.styles';\nimport API from '../../lib/API';\nimport { fd } from '../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  before: null,\n  after: null,\n  search: []\n}; // TODO: Potentially add state logic on the redux store, still TBD\n\nconst SearchBar = ({\n  classes\n}) => {\n  _s();\n\n  const [open, setOpen] = React.useState(false);\n  const [options, setOptions] = React.useState(initialState);\n  const [term, setTerm] = React.useState('');\n  const isLoading = open && options.search.length === 0;\n  const history = useHistory();\n\n  const handleKeyPress = event => {\n    const target = event.target;\n\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      history.push(`/subreddit/${target.value}`);\n    }\n  };\n\n  React.useEffect(() => {\n    const loadSearchData = async () => {\n      const res = await API.getSearchResults({\n        q: term,\n        type: 'sr'\n      });\n      setOptions(res);\n    };\n\n    if (term.length > 3) {\n      // TODO: debounce doesn't work for some reason, still investigating\n      const load = setTimeout(() => loadSearchData(), 1000);\n      return () => clearTimeout(load);\n    }\n  }, [term]);\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    className: classes.search,\n    open: open,\n    onOpen: () => {\n      setOpen(true);\n    },\n    onClose: () => {\n      setOpen(false);\n    },\n    options: options.search,\n    getOptionLabel: option => option.display_name,\n    getOptionSelected: (option, value) => option.display_name === value.display_name,\n    loading: isLoading,\n    loadingText: \"Se cauta, o secund\\u0103...\",\n    noOptionsText: \"Nu am gasit nimic :(\",\n    renderInput: args => /*#__PURE__*/_jsxDEV(TextField, { ...args,\n      value: term,\n      \"aria-label\": \"Search field\",\n      onChange: ({\n        target\n      }) => setTerm(target.value),\n      placeholder: \"Cauta...\",\n      variant: \"outlined\",\n      margin: \"normal\",\n      size: \"small\",\n      InputProps: { ...args.InputProps,\n        endAdornment: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"inherit\",\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 19\n          }, this) : null, args.InputProps.endAdornment]\n        }, void 0, true),\n        onKeyDown: handleKeyPress\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this),\n    renderOption: (option, {\n      inputValue\n    }) => {\n      const matches = match(option.display_name, inputValue);\n      const parts = parse(option.display_name, matches);\n      let formatedSubs = null;\n\n      if (option.subscribers) {\n        formatedSubs = fd.addNumberSeparator(option.subscribers);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Link, {\n        className: classes.listSearch,\n        to: `/subreddit/${option.display_name}`,\n        children: [parts.map((part, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: part.highlight ? 700 : 400\n          },\n          children: part.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [formatedSubs, \" membrii\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this);\n    },\n    freeSolo: true,\n    autoSelect: true,\n    autoComplete: true,\n    autoHighlight: true,\n    handleHomeEndKeys: true,\n    clearOnEscape: true,\n    clearOnBlur: true,\n    openOnFocus: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBar, \"iJ1E19wju+S0sfExMRk4euRHOqw=\", false, function () {\n  return [useHistory];\n});\n\n_c = SearchBar;\nexport default withStyles(searchStyles)(SearchBar);\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/components/SearchBar/index.tsx"],"names":["React","Link","useHistory","withStyles","CircularProgress","TextField","Autocomplete","parse","match","searchStyles","API","fd","initialState","before","after","search","SearchBar","classes","open","setOpen","useState","options","setOptions","term","setTerm","isLoading","length","history","handleKeyPress","event","target","key","preventDefault","push","value","useEffect","loadSearchData","res","getSearchResults","q","type","load","setTimeout","clearTimeout","option","display_name","args","InputProps","endAdornment","onKeyDown","inputValue","matches","parts","formatedSubs","subscribers","addNumberSeparator","listSearch","map","part","index","fontWeight","highlight","text"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\nimport React from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { withStyles, CircularProgress, TextField } from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\n// import debounce from 'lodash/debounce';\nimport searchStyles, { StyleProps } from './searchBar.styles';\nimport API from '../../lib/API';\nimport { fd } from '../../helpers';\n\ninterface TSearchData {\n  display_name: string;\n  subscribers: string;\n}\ninterface ISearch {\n  before: string | null;\n  after: string | null;\n  search: TSearchData[];\n}\n\nconst initialState = {\n  before: null,\n  after: null,\n  search: [],\n};\n\n// TODO: Potentially add state logic on the redux store, still TBD\nconst SearchBar: React.FC<StyleProps> = ({ classes }) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [options, setOptions] = React.useState<ISearch>(initialState);\n  const [term, setTerm] = React.useState<string>('');\n  const isLoading = open && options.search.length === 0;\n\n  const history = useHistory();\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const target = event.target as HTMLInputElement;\n\n    if (event.key === 'Enter') {\n      event.preventDefault();\n\n      history.push(`/subreddit/${target.value}`);\n    }\n  };\n\n  React.useEffect(() => {\n    const loadSearchData = async () => {\n      const res = await API.getSearchResults({\n        q: term,\n        type: 'sr',\n      });\n\n      setOptions(res);\n    };\n\n    if (term.length > 3) {\n      // TODO: debounce doesn't work for some reason, still investigating\n      const load = setTimeout(() => loadSearchData(), 1000);\n\n      return () => clearTimeout(load);\n    }\n  }, [term]);\n\n  return (\n    <Autocomplete\n      className={classes.search}\n      open={open}\n      onOpen={() => {\n        setOpen(true);\n      }}\n      onClose={() => {\n        setOpen(false);\n      }}\n      options={options.search}\n      getOptionLabel={(option) => option.display_name}\n      getOptionSelected={(option, value) =>\n        option.display_name === value.display_name\n      }\n      loading={isLoading}\n      loadingText=\"Se cauta, o secundă...\"\n      noOptionsText=\"Nu am gasit nimic :(\"\n      renderInput={(args) => (\n        <TextField\n          {...args}\n          value={term}\n          aria-label=\"Search field\"\n          onChange={({ target }) => setTerm(target.value)}\n          placeholder=\"Cauta...\"\n          variant=\"outlined\"\n          margin=\"normal\"\n          size=\"small\"\n          InputProps={{\n            ...args.InputProps,\n            endAdornment: (\n              <>\n                {isLoading ? (\n                  <CircularProgress color=\"inherit\" size={20} />\n                ) : null}\n                {args.InputProps.endAdornment}\n              </>\n            ),\n            onKeyDown: handleKeyPress,\n          }}\n        />\n      )}\n      renderOption={(option, { inputValue }) => {\n        const matches = match(option.display_name, inputValue);\n        const parts = parse(option.display_name, matches);\n        let formatedSubs = null;\n        if (option.subscribers) {\n          formatedSubs = fd.addNumberSeparator(option.subscribers);\n        }\n\n        return (\n          <Link\n            className={classes.listSearch}\n            to={`/subreddit/${option.display_name}`}\n          >\n            {parts.map(\n              (\n                part: { highlight: any; text: React.ReactNode },\n                index: number,\n              ) => (\n                <span\n                  key={index}\n                  style={{ fontWeight: part.highlight ? 700 : 400 }}\n                >\n                  {part.text}\n                </span>\n              ),\n            )}\n            <p>{formatedSubs} membrii</p>\n          </Link>\n        );\n      }}\n      freeSolo\n      autoSelect\n      autoComplete\n      autoHighlight\n      handleHomeEndKeys\n      clearOnEscape\n      clearOnBlur\n      openOnFocus\n    />\n  );\n};\n\nexport default withStyles(searchStyles)(SearchBar);\n"]},"metadata":{},"sourceType":"module"}