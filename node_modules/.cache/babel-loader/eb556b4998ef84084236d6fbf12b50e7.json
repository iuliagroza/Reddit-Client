{"ast":null,"code":"const API_URL = process.env.REACT_APP_API_URL || 'https://www.reddit.com';\nconst initialOptions = {\n  headers: {\n    accept: 'application/json'\n  }\n};\nvar FetchError;\n\n(function (FetchError) {\n  FetchError[\"POST\"] = \"Failed to get post data\";\n  FetchError[\"USER\"] = \"Failed to get user data\";\n  FetchError[\"COMMENTS\"] = \"Failed to get comments data\";\n  FetchError[\"SUBREDDIT\"] = \"Failed to get subreddit data\";\n  FetchError[\"ALL_POST\"] = \"Failed to get posts data\";\n  FetchError[\"ALL_SUBREDDITS\"] = \"Failed to get subreddits data\";\n  FetchError[\"POST_WITH_COMMENTS\"] = \"Failed to get posts with comments data\";\n  FetchError[\"SEARCH\"] = \"No results found!\";\n})(FetchError || (FetchError = {}));\n\nconst getSubreddit = async (subreddit, options = initialOptions) => {\n  const url = `${API_URL}/r/${subreddit}/about.json`;\n  const query = await fetch(url, options);\n  const json = await query.json();\n  if (query.ok) return json.data;\n  throw new Error(json.message || FetchError.SUBREDDIT);\n};\n/* Preia postarile pe subreddits */\n\n\nconst getSubredditPosts = async (subreddit, options = initialOptions) => {\n  const url = `${API_URL}/r/${subreddit}/.json`;\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: json.data.children.map(sp => sp.data)\n    };\n  }\n\n  throw new Error(json.message || FetchError.SUBREDDIT);\n};\n/* Preia toate informatiile pe subreddit */\n\n\nconst getAllSubreddits = async (options = initialOptions) => {\n  const url = `${API_URL}/subreddits.json`;\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      subreddits: json.data.children.map(c => c.data)\n    };\n  }\n\n  throw new Error(json.message || FetchError.ALL_SUBREDDITS);\n};\n/* Preia toate informatiile postarilor */\n\n\nconst getPost = async (post, options = initialOptions) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n  const query = await fetch(url, options);\n  const json = await query.json();\n  if (query.ok) return json[0].data.children[0].data;\n  throw new Error(json.message || FetchError.POST);\n};\n/* Preia comentariile cu tot cu upvotes */\n\n\nconst getComments = async (post, options = initialOptions) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json[1].data.after,\n      before: json[1].data.before,\n      comments: json[1].data.children.map(c => c.data)\n    };\n  }\n\n  throw new Error(json.message || FetchError.POST);\n};\n/* Preia postarile cu tot cu comentarii */\n\n\nconst getPostWithComments = async (post, options = initialOptions) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json[1].data.after,\n      before: json[1].data.before,\n      comments: json[1].data.children.map(c => c.data),\n      post: json[0].data.children[0].data\n    };\n  }\n\n  throw new Error(json.message || FetchError.POST);\n};\n/* Preia toate postarile */\n\n\nconst getAllPosts = async (subreddit, params = '', options = initialOptions) => {\n  let url;\n\n  if (subreddit) {\n    url = `${API_URL}/r/${subreddit}/${params}.json`;\n  } else {\n    url = `${API_URL}/${params}.json`;\n  }\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: json.data.children.map(p => p.data)\n    };\n  }\n\n  throw new Error(json.message || FetchError.ALL_POST);\n};\n/* Preia informatiile despre useri */\n\n\nconst getUser = async (user, options = initialOptions) => {\n  const url = `${API_URL}/user/${user}/about/.json`;\n  const query = await fetch(url, options);\n  const json = await query.json();\n  if (query.ok) return json.data;\n  throw new Error(json.message || FetchError.USER);\n};\n/* Preia postarile in functie de userul de care apartin */\n\n\nconst getUserPosts = async (user, options = initialOptions) => {\n  const url = `${API_URL}/user/${user}/.json`;\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    const posts = json.data.children.filter(p => p.kind === 't3');\n    const comments = json.data.children.filter(c => c.kind === 't1');\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: posts.map(p => p.data),\n      comments: comments.map(c => c.data)\n    };\n  }\n\n  throw new Error(json.message || FetchError.USER);\n};\n/* Preia rezultatele cautarii */\n\n\nconst getSearchResults = async (params, options = initialOptions) => {\n  const searchParams = new URLSearchParams(params);\n  const url = `${API_URL}/search.json?${searchParams}`;\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      search: json.data.children.map(sr => sr.data)\n    };\n  }\n\n  throw new Error(json.message || FetchError.SEARCH);\n};\n\nexport default {\n  getSubreddit,\n  getAllSubreddits,\n  getSubredditPosts,\n  getPost,\n  getComments,\n  getPostWithComments,\n  getUser,\n  getUserPosts,\n  getAllPosts,\n  getSearchResults\n};","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/lib/API.ts"],"names":["API_URL","process","env","REACT_APP_API_URL","initialOptions","headers","accept","FetchError","getSubreddit","subreddit","options","url","query","fetch","json","ok","data","Error","message","SUBREDDIT","getSubredditPosts","after","before","posts","children","map","sp","getAllSubreddits","subreddits","c","ALL_SUBREDDITS","getPost","post","id","POST","getComments","comments","getPostWithComments","getAllPosts","params","p","ALL_POST","getUser","user","USER","getUserPosts","filter","kind","getSearchResults","searchParams","URLSearchParams","search","sr","SEARCH"],"mappings":"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","sourcesContent":["const API_URL = process.env.REACT_APP_API_URL || 'https://www.reddit.com';\n\nconst initialOptions = {\n  headers: {\n    accept: 'application/json',\n  },\n};\n\nenum FetchError {\n  POST = 'Failed to get post data',\n  USER = 'Failed to get user data',\n  COMMENTS = 'Failed to get comments data',\n  SUBREDDIT = 'Failed to get subreddit data',\n  ALL_POST = 'Failed to get posts data',\n  ALL_SUBREDDITS = 'Failed to get subreddits data',\n  POST_WITH_COMMENTS = 'Failed to get posts with comments data',\n  SEARCH = 'No results found!',\n}\n\nconst getSubreddit = async (subreddit: string, options = initialOptions) => {\n  const url = `${API_URL}/r/${subreddit}/about.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) return json.data;\n\n  throw new Error(json.message || FetchError.SUBREDDIT);\n};\n\n/* Preia postarile pe subreddits */\nconst getSubredditPosts = async (\n  subreddit: string,\n  options = initialOptions,\n) => {\n  const url = `${API_URL}/r/${subreddit}/.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: json.data.children.map((sp: any) => sp.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.SUBREDDIT);\n};\n\n/* Preia toate informatiile pe subreddit */\nconst getAllSubreddits = async (options = initialOptions) => {\n  const url = `${API_URL}/subreddits.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      subreddits: json.data.children.map((c: any) => c.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.ALL_SUBREDDITS);\n};\n\n/* Preia toate informatiile postarilor */\nconst getPost = async (post: string[], options = initialOptions) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n\n  const query = await fetch(url, options);\n\n  const json = await query.json();\n\n  if (query.ok) return json[0].data.children[0].data;\n\n  throw new Error(json.message || FetchError.POST);\n};\n\n/* Preia comentariile cu tot cu upvotes */\nconst getComments = async (post: string[], options = initialOptions) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n\n  const query = await fetch(url, options);\n\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json[1].data.after,\n      before: json[1].data.before,\n      comments: json[1].data.children.map((c: any) => c.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.POST);\n};\n\n/* Preia postarile cu tot cu comentarii */\nconst getPostWithComments = async (\n  post: string[],\n  options = initialOptions,\n) => {\n  const [subreddit, id] = post;\n  const url = `${API_URL}/r/${subreddit}/comments/${id}/.json`;\n\n  const query = await fetch(url, options);\n\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json[1].data.after,\n      before: json[1].data.before,\n      comments: json[1].data.children.map((c: any) => c.data),\n      post: json[0].data.children[0].data,\n    };\n  }\n\n  throw new Error(json.message || FetchError.POST);\n};\n\n/* Preia toate postarile */\nconst getAllPosts = async (\n  subreddit?: string,\n  params: string = '',\n  options = initialOptions,\n) => {\n  let url;\n  if (subreddit) {\n    url = `${API_URL}/r/${subreddit}/${params}.json`;\n  } else {\n    url = `${API_URL}/${params}.json`;\n  }\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: json.data.children.map((p: any) => p.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.ALL_POST);\n};\n\n/* Preia informatiile despre useri */\nconst getUser = async (user: string, options = initialOptions) => {\n  const url = `${API_URL}/user/${user}/about/.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) return json.data;\n\n  throw new Error(json.message || FetchError.USER);\n};\n\n/* Preia postarile in functie de userul de care apartin */\nconst getUserPosts = async (user: string, options = initialOptions) => {\n  const url = `${API_URL}/user/${user}/.json`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    const posts = json.data.children.filter((p: any) => p.kind === 't3');\n    const comments = json.data.children.filter((c: any) => c.kind === 't1');\n\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      posts: posts.map((p: any) => p.data),\n      comments: comments.map((c: any) => c.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.USER);\n};\n\n/* Preia rezultatele cautarii */\nconst getSearchResults = async (\n  params: { q: string; type: string },\n  options = initialOptions,\n) => {\n  const searchParams = new URLSearchParams(params);\n  const url = `${API_URL}/search.json?${searchParams}`;\n\n  const query = await fetch(url, options);\n  const json = await query.json();\n\n  if (query.ok) {\n    return {\n      after: json.data.after,\n      before: json.data.before,\n      search: json.data.children.map((sr: any) => sr.data),\n    };\n  }\n\n  throw new Error(json.message || FetchError.SEARCH);\n};\n\nexport default {\n  getSubreddit,\n  getAllSubreddits,\n  getSubredditPosts,\n  getPost,\n  getComments,\n  getPostWithComments,\n  getUser,\n  getUserPosts,\n  getAllPosts,\n  getSearchResults,\n};\n"]},"metadata":{},"sourceType":"module"}