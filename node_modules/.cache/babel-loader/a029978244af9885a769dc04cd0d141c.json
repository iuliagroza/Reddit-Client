{"ast":null,"code":"import _slicedToArray from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A [Strategy]{@link module:workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-precaching\n */\n\nvar PrecacheStrategy = /*#__PURE__*/function (_Strategy) {\n  _inherits(PrecacheStrategy, _Strategy);\n\n  var _super = _createSuper(PrecacheStrategy);\n\n  /**\n   *\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to the cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n   * of all fetch() requests made by this strategy.\n   * @param {Object} [options.matchOptions] The\n   * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n   * for any `cache.match()` or `cache.put()` calls made by this strategy.\n   * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n   * get the response from the network if there's a precache miss.\n   */\n  function PrecacheStrategy() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PrecacheStrategy);\n\n    options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n    _this = _super.call(this, options);\n    _this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true; // Redirected responses cannot be used to satisfy a navigation request, so\n    // any redirected response must be \"copied\" rather than cloned, so the new\n    // response doesn't contain the `redirected` flag. See:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n\n    _this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {module:workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(PrecacheStrategy, [{\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request, handler) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return handler.cacheMatch(request);\n\n              case 2:\n                response = _context.sent;\n\n                if (response) {\n                  _context.next = 11;\n                  break;\n                }\n\n                if (!(handler.event && handler.event.type === 'install')) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 7;\n                return this._handleInstall(request, handler);\n\n              case 7:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 8:\n                _context.next = 10;\n                return this._handleFetch(request, handler);\n\n              case 10:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 11:\n                return _context.abrupt(\"return\", response);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n  }, {\n    key: \"_handleFetch\",\n    value: function () {\n      var _handleFetch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request, handler) {\n        var response, cacheKey;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this._fallbackToNetwork) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.warn(\"The precached response for \" + \"\".concat(getFriendlyURL(request.url), \" in \").concat(this.cacheName, \" was not \") + \"found. Falling back to the network instead.\");\n                }\n\n                _context2.next = 4;\n                return handler.fetch(request);\n\n              case 4:\n                response = _context2.sent;\n                _context2.next = 8;\n                break;\n\n              case 7:\n                throw new WorkboxError('missing-precache-entry', {\n                  cacheName: this.cacheName,\n                  url: request.url\n                });\n\n              case 8:\n                if (!(process.env.NODE_ENV !== 'production')) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                _context2.t0 = handler.params && handler.params.cacheKey;\n\n                if (_context2.t0) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                _context2.next = 13;\n                return handler.getCacheKey(request, 'read');\n\n              case 13:\n                _context2.t0 = _context2.sent;\n\n              case 14:\n                cacheKey = _context2.t0;\n                // Workbox is going to handle the route.\n                // print the routing details to the console.\n                logger.groupCollapsed(\"Precaching is responding to: \" + getFriendlyURL(request.url));\n                logger.log(\"Serving the precached url: \".concat(getFriendlyURL(cacheKey.url)));\n                logger.groupCollapsed(\"View request details here.\");\n                logger.log(request);\n                logger.groupEnd();\n                logger.groupCollapsed(\"View response details here.\");\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n\n              case 24:\n                return _context2.abrupt(\"return\", response);\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _handleFetch(_x3, _x4) {\n        return _handleFetch2.apply(this, arguments);\n      }\n\n      return _handleFetch;\n    }()\n  }, {\n    key: \"_handleInstall\",\n    value: function () {\n      var _handleInstall2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(request, handler) {\n        var response, wasCached;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._useDefaultCacheabilityPluginIfNeeded();\n\n                _context3.next = 3;\n                return handler.fetch(request);\n\n              case 3:\n                response = _context3.sent;\n                _context3.next = 6;\n                return handler.cachePut(request, response.clone());\n\n              case 6:\n                wasCached = _context3.sent;\n\n                if (wasCached) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                throw new WorkboxError('bad-precaching-response', {\n                  url: request.url,\n                  status: response.status\n                });\n\n              case 9:\n                return _context3.abrupt(\"return\", response);\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _handleInstall(_x5, _x6) {\n        return _handleInstall2.apply(this, arguments);\n      }\n\n      return _handleInstall;\n    }()\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_useDefaultCacheabilityPluginIfNeeded\",\n    value: function _useDefaultCacheabilityPluginIfNeeded() {\n      var defaultPluginIndex = null;\n      var cacheWillUpdatePluginCount = 0;\n\n      var _iterator = _createForOfIteratorHelper(this.plugins.entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              index = _step$value[0],\n              plugin = _step$value[1];\n\n          // Ignore the copy redirected plugin when determining what to do.\n          if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n            continue;\n          } // Save the default plugin's index, in case it needs to be removed.\n\n\n          if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n            defaultPluginIndex = index;\n          }\n\n          if (plugin.cacheWillUpdate) {\n            cacheWillUpdatePluginCount++;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (cacheWillUpdatePluginCount === 0) {\n        this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n      } else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n        // Only remove the default plugin; multiple custom plugins are allowed.\n        this.plugins.splice(defaultPluginIndex, 1);\n      } // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n\n    }\n  }]);\n\n  return PrecacheStrategy;\n}(Strategy);\n\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n  cacheWillUpdate: function cacheWillUpdate(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              response = _ref.response;\n\n              if (!(!response || response.status >= 400)) {\n                _context4.next = 3;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", null);\n\n            case 3:\n              return _context4.abrupt(\"return\", response);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  }\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n  cacheWillUpdate: function cacheWillUpdate(_ref2) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              response = _ref2.response;\n\n              if (!response.redirected) {\n                _context5.next = 7;\n                break;\n              }\n\n              _context5.next = 4;\n              return copyResponse(response);\n\n            case 4:\n              _context5.t0 = _context5.sent;\n              _context5.next = 8;\n              break;\n\n            case 7:\n              _context5.t0 = response;\n\n            case 8:\n              return _context5.abrupt(\"return\", _context5.t0);\n\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  }\n};\nexport { PrecacheStrategy };","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/workbox-precaching/PrecacheStrategy.js"],"names":["copyResponse","cacheNames","getFriendlyURL","logger","WorkboxError","Strategy","PrecacheStrategy","options","cacheName","getPrecacheName","_fallbackToNetwork","fallbackToNetwork","plugins","push","copyRedirectedCacheableResponsesPlugin","request","handler","cacheMatch","response","event","type","_handleInstall","_handleFetch","process","env","NODE_ENV","warn","url","fetch","params","cacheKey","getCacheKey","groupCollapsed","log","groupEnd","_useDefaultCacheabilityPluginIfNeeded","cachePut","clone","wasCached","status","defaultPluginIndex","cacheWillUpdatePluginCount","entries","index","plugin","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","splice","redirected"],"mappings":"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","sourcesContent":["/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\n * A [Strategy]{@link module:workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-precaching\n */\nclass PrecacheStrategy extends Strategy {\n    /**\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n     * of all fetch() requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n     * get the response from the network if there's a precache miss.\n     */\n    constructor(options = {}) {\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n        super(options);\n        this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true;\n        // Redirected responses cannot be used to satisfy a navigation request, so\n        // any redirected response must be \"copied\" rather than cloned, so the new\n        // response doesn't contain the `redirected` flag. See:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (!response) {\n            // If this is an `install` event then populate the cache. If this is a\n            // `fetch` event (or any other event) then respond with the cached\n            // response.\n            if (handler.event && handler.event.type === 'install') {\n                return await this._handleInstall(request, handler);\n            }\n            return await this._handleFetch(request, handler);\n        }\n        return response;\n    }\n    async _handleFetch(request, handler) {\n        let response;\n        // Fall back to the network if we don't have a cached response\n        // (perhaps due to manual cache cleanup).\n        if (this._fallbackToNetwork) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.warn(`The precached response for ` +\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\n                    `found. Falling back to the network instead.`);\n            }\n            response = await handler.fetch(request);\n        }\n        else {\n            // This shouldn't normally happen, but there are edge cases:\n            // https://github.com/GoogleChrome/workbox/issues/1441\n            throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url,\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            const cacheKey = handler.params && handler.params.cacheKey ||\n                await handler.getCacheKey(request, 'read');\n            // Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Precaching is responding to: ` +\n                getFriendlyURL(request.url));\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey.url)}`);\n            logger.groupCollapsed(`View request details here.`);\n            logger.log(request);\n            logger.groupEnd();\n            logger.groupCollapsed(`View response details here.`);\n            logger.log(response);\n            logger.groupEnd();\n            logger.groupEnd();\n        }\n        return response;\n    }\n    async _handleInstall(request, handler) {\n        this._useDefaultCacheabilityPluginIfNeeded();\n        const response = await handler.fetch(request);\n        // Make sure we defer cachePut() until after we know the response\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\n        const wasCached = await handler.cachePut(request, response.clone());\n        if (!wasCached) {\n            // Throwing here will lead to the `install` handler failing, which\n            // we want to do if *any* of the responses aren't safe to cache.\n            throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status,\n            });\n        }\n        return response;\n    }\n    /**\n     * This method is complex, as there a number of things to account for:\n     *\n     * The `plugins` array can be set at construction, and/or it might be added to\n     * to at any time before the strategy is used.\n     *\n     * At the time the strategy is used (i.e. during an `install` event), there\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\n     *\n     * - If this method is called and there are no suitable `cacheWillUpdate`\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\n     *\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\n     * we don't have to do anything (this might be a previously added\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\n     *\n     * - If this method is called and there is more than one `cacheWillUpdate`,\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\n     * we need to remove it. (This situation is unlikely, but it could happen if\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\n     *\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\n     *\n     * @private\n     */\n    _useDefaultCacheabilityPluginIfNeeded() {\n        let defaultPluginIndex = null;\n        let cacheWillUpdatePluginCount = 0;\n        for (const [index, plugin] of this.plugins.entries()) {\n            // Ignore the copy redirected plugin when determining what to do.\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n                continue;\n            }\n            // Save the default plugin's index, in case it needs to be removed.\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n                defaultPluginIndex = index;\n            }\n            if (plugin.cacheWillUpdate) {\n                cacheWillUpdatePluginCount++;\n            }\n        }\n        if (cacheWillUpdatePluginCount === 0) {\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n        }\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n            // Only remove the default plugin; multiple custom plugins are allowed.\n            this.plugins.splice(defaultPluginIndex, 1);\n        }\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n}\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n    async cacheWillUpdate({ response }) {\n        if (!response || response.status >= 400) {\n            return null;\n        }\n        return response;\n    }\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n    async cacheWillUpdate({ response }) {\n        return response.redirected ? await copyResponse(response) : response;\n    }\n};\nexport { PrecacheStrategy };\n"]},"metadata":{},"sourceType":"module"}