{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport API from '../../lib/API';\nconst initialState = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null\n  },\n  profile: {},\n  data: {\n    posts: [],\n    comments: []\n  }\n};\nexport const getUserByName = createAsyncThunk('user/getUserByName', async userName => {\n  const response = await API.getUser(userName);\n  return response;\n});\nexport const getUserPosts = createAsyncThunk('user/getUserPosts', async userName => {\n  const response = await API.getUserPosts(userName);\n  return response;\n});\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getUserByName.pending)]: state => {\n      state.status = 'pending';\n    },\n    [String(getUserByName.fulfilled)]: (state, {\n      payload\n    }) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.profile = payload;\n    },\n    [String(getUserByName.rejected)]: (state, {\n      payload\n    }) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = payload;\n    },\n    [String(getUserPosts.pending)]: state => {\n      state.status = 'pending';\n    },\n    [String(getUserPosts.fulfilled)]: (state, {\n      payload\n    }) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.data.posts = payload.posts;\n      state.data.comments = payload.comments;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getUserPosts.rejected)]: (state, {\n      payload\n    }) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = payload;\n    }\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/features/user/userSlice.ts"],"names":["createAsyncThunk","createSlice","API","initialState","status","error","isLoading","isError","page","before","after","profile","data","posts","comments","getUserByName","userName","response","getUser","getUserPosts","userSlice","name","reducers","extraReducers","String","pending","state","fulfilled","payload","rejected","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IFetch, TPage } from '../index';\nimport API from '../../lib/API';\n\ninterface IResponse extends TPage {\n  posts: object[];\n  comments: object[];\n}\n\nexport interface IPosts extends IFetch {\n  profile: object | any;\n  data: {\n    posts: object[];\n    comments: object[];\n  };\n}\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  profile: {},\n  data: {\n    posts: [],\n    comments: [],\n  },\n};\n\nexport const getUserByName = createAsyncThunk(\n  'user/getUserByName',\n  async (userName: string) => {\n    const response = await API.getUser(userName);\n\n    return response;\n  },\n);\n\nexport const getUserPosts = createAsyncThunk(\n  'user/getUserPosts',\n  async (userName: string) => {\n    const response: IResponse = await API.getUserPosts(userName);\n\n    return response;\n  },\n);\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getUserByName.pending)]: (state) => {\n      state.status = 'pending';\n    },\n    [String(getUserByName.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<object>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.profile = payload;\n    },\n    [String(getUserByName.rejected)]: (\n      state,\n      { payload }: PayloadAction<string>,\n    ) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = payload;\n    },\n    [String(getUserPosts.pending)]: (state) => {\n      state.status = 'pending';\n    },\n    [String(getUserPosts.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<IResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.data.posts = payload.posts;\n      state.data.comments = payload.comments;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getUserPosts.rejected)]: (\n      state,\n      { payload }: PayloadAction<string>,\n    ) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = payload;\n    },\n  },\n});\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}