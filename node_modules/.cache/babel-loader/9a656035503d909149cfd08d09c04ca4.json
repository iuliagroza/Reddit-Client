{"ast":null,"code":"import _defineProperty from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _extraReducers;import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import API from'../../lib/API';var initialState={status:'idle',error:null,isLoading:true,isError:false,page:{before:null,after:null},info:{},posts:[]};export var getSubredditByName=createAsyncThunk('subreddit/getSubredditByName',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(subName){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return API.getSubreddit(subName);case 2:response=_context.sent;return _context.abrupt(\"return\",response);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());export var getSubredditPosts=createAsyncThunk('subreddit/getSubredditPosts',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(subName){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return API.getSubredditPosts(subName);case 2:response=_context2.sent;return _context2.abrupt(\"return\",response);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());var subredditSlice=createSlice({name:'subreddit',initialState:initialState,reducers:{},/* Minimizeaza postul */extraReducers:(_extraReducers={},_defineProperty(_extraReducers,String(getSubredditByName.pending),function(state){state.status='pending';state.isLoading=true;}),_defineProperty(_extraReducers,String(getSubredditByName.fulfilled),function(state,_ref3){var payload=_ref3.payload;state.status='succeeded';state.isError=false;state.isLoading=false;state.info=payload;}),_defineProperty(_extraReducers,String(getSubredditByName.rejected),function(state,action){state.status='failed';state.isError=true;state.isLoading=false;state.error=action.error.message;}),_defineProperty(_extraReducers,String(getSubredditPosts.pending),function(state){state.status='pending';state.isLoading=true;}),_defineProperty(_extraReducers,String(getSubredditPosts.fulfilled),function(state,_ref4){var payload=_ref4.payload;state.status='succeeded';state.isError=false;state.isLoading=false;state.posts=payload.posts;state.page.after=payload.after;state.page.before=payload.before;}),_defineProperty(_extraReducers,String(getSubredditPosts.rejected),function(state,action){state.status='failed';state.isError=true;state.isLoading=false;state.error=action.error.message;}),_extraReducers)});export default subredditSlice.reducer;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/features/subreddit/subredditSlice.ts"],"names":["createSlice","createAsyncThunk","API","initialState","status","error","isLoading","isError","page","before","after","info","posts","getSubredditByName","subName","getSubreddit","response","getSubredditPosts","subredditSlice","name","reducers","extraReducers","String","pending","state","fulfilled","payload","rejected","action","message","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch, TPage } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPosts extends IFetch {\n  info: object | any;\n  posts: object[];\n}\n\ninterface IResponse extends TPage {\n  posts: object[];\n}\n\nconst initialState: IPosts = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  info: {},\n  posts: [],\n};\n\nexport const getSubredditByName = createAsyncThunk(\n  'subreddit/getSubredditByName',\n  async (subName: string) => {\n    const response = await API.getSubreddit(subName);\n\n    return response;\n  },\n);\n\nexport const getSubredditPosts = createAsyncThunk(\n  'subreddit/getSubredditPosts',\n  async (subName: string) => {\n    const response: IResponse = await API.getSubredditPosts(subName);\n\n    return response;\n  },\n);\n\nconst subredditSlice = createSlice({\n  name: 'subreddit',\n  initialState,\n  reducers: {},\n  /* Minimizeaza postul */\n  extraReducers: {\n    [String(getSubredditByName.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubredditByName.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<object>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.info = payload;\n    },\n    [String(getSubredditByName.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n    [String(getSubredditPosts.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getSubredditPosts.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<IResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.posts = payload.posts;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getSubredditPosts.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default subredditSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}