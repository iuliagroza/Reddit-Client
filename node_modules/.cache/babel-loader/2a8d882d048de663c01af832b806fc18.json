{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\n\nvar NetworkFirst = /*#__PURE__*/function (_Strategy) {\n  _inherits(NetworkFirst, _Strategy);\n\n  var _super = _createSuper(NetworkFirst);\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n   * `fetch()` requests made by this strategy.\n   * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n   * that fail to respond within the timeout will fallback to the cache.\n   *\n   * This option can be used to combat\n   * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n   * scenarios.\n   */\n  function NetworkFirst() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, NetworkFirst);\n\n    _this = _super.call(this, options); // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n    // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n\n    if (!_this.plugins.some(function (p) {\n      return 'cacheWillUpdate' in p;\n    })) {\n      _this.plugins.unshift(cacheOkAndOpaquePlugin);\n    }\n\n    _this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (_this._networkTimeoutSeconds) {\n        assert.isType(_this._networkTimeoutSeconds, 'number', {\n          moduleName: 'workbox-strategies',\n          className: _this.constructor.name,\n          funcName: 'constructor',\n          paramName: 'networkTimeoutSeconds'\n        });\n      }\n    }\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {module:workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(NetworkFirst, [{\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request, handler) {\n        var logs, promises, timeoutId, _this$_getTimeoutProm, id, promise, networkPromise, response, _iterator, _step, log;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                logs = [];\n\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'handle',\n                    paramName: 'makeRequest'\n                  });\n                }\n\n                promises = [];\n\n                if (this._networkTimeoutSeconds) {\n                  _this$_getTimeoutProm = this._getTimeoutPromise({\n                    request: request,\n                    logs: logs,\n                    handler: handler\n                  }), id = _this$_getTimeoutProm.id, promise = _this$_getTimeoutProm.promise;\n                  timeoutId = id;\n                  promises.push(promise);\n                }\n\n                networkPromise = this._getNetworkPromise({\n                  timeoutId: timeoutId,\n                  request: request,\n                  logs: logs,\n                  handler: handler\n                });\n                promises.push(networkPromise);\n                _context2.next = 8;\n                return handler.waitUntil(_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return handler.waitUntil(Promise.race(promises));\n\n                        case 2:\n                          _context.t0 = _context.sent;\n\n                          if (_context.t0) {\n                            _context.next = 7;\n                            break;\n                          }\n\n                          _context.next = 6;\n                          return networkPromise;\n\n                        case 6:\n                          _context.t0 = _context.sent;\n\n                        case 7:\n                          return _context.abrupt(\"return\", _context.t0);\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }))());\n\n              case 8:\n                response = _context2.sent;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n                  _iterator = _createForOfIteratorHelper(logs);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      log = _step.value;\n                      logger.log(log);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n\n                if (response) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                throw new WorkboxError('no-response', {\n                  url: request.url\n                });\n\n              case 12:\n                return _context2.abrupt(\"return\", response);\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getTimeoutPromise\",\n    value: function _getTimeoutPromise(_ref2) {\n      var _this2 = this;\n\n      var request = _ref2.request,\n          logs = _ref2.logs,\n          handler = _ref2.handler;\n      var timeoutId;\n      var timeoutPromise = new Promise(function (resolve) {\n        var onNetworkTimeout = /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    if (process.env.NODE_ENV !== 'production') {\n                      logs.push(\"Timing out the network response at \" + \"\".concat(_this2._networkTimeoutSeconds, \" seconds.\"));\n                    }\n\n                    _context3.t0 = resolve;\n                    _context3.next = 4;\n                    return handler.cacheMatch(request);\n\n                  case 4:\n                    _context3.t1 = _context3.sent;\n                    (0, _context3.t0)(_context3.t1);\n\n                  case 6:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          return function onNetworkTimeout() {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n\n        timeoutId = setTimeout(onNetworkTimeout, _this2._networkTimeoutSeconds * 1000);\n      });\n      return {\n        promise: timeoutPromise,\n        id: timeoutId\n      };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_getNetworkPromise\",\n    value: function () {\n      var _getNetworkPromise2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref4) {\n        var timeoutId, request, logs, handler, error, response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                timeoutId = _ref4.timeoutId, request = _ref4.request, logs = _ref4.logs, handler = _ref4.handler;\n                _context4.prev = 1;\n                _context4.next = 4;\n                return handler.fetchAndCachePut(request);\n\n              case 4:\n                response = _context4.sent;\n                _context4.next = 10;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](1);\n                error = _context4.t0;\n\n              case 10:\n                if (timeoutId) {\n                  clearTimeout(timeoutId);\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Got response from network.\");\n                  } else {\n                    logs.push(\"Unable to get a response from the network. Will respond \" + \"with a cached response.\");\n                  }\n                }\n\n                if (!(error || !response)) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                _context4.next = 15;\n                return handler.cacheMatch(request);\n\n              case 15:\n                response = _context4.sent;\n\n                if (process.env.NODE_ENV !== 'production') {\n                  if (response) {\n                    logs.push(\"Found a cached response in the '\".concat(this.cacheName, \"'\") + \" cache.\");\n                  } else {\n                    logs.push(\"No response found in the '\".concat(this.cacheName, \"' cache.\"));\n                  }\n                }\n\n              case 17:\n                return _context4.abrupt(\"return\", response);\n\n              case 18:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 7]]);\n      }));\n\n      function _getNetworkPromise(_x3) {\n        return _getNetworkPromise2.apply(this, arguments);\n      }\n\n      return _getNetworkPromise;\n    }()\n  }]);\n\n  return NetworkFirst;\n}(Strategy);\n\nexport { NetworkFirst };","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/workbox-strategies/NetworkFirst.js"],"names":["assert","logger","WorkboxError","cacheOkAndOpaquePlugin","Strategy","messages","NetworkFirst","options","plugins","some","p","unshift","_networkTimeoutSeconds","networkTimeoutSeconds","process","env","NODE_ENV","isType","moduleName","className","constructor","name","funcName","paramName","request","handler","logs","isInstance","Request","promises","_getTimeoutPromise","id","promise","timeoutId","push","networkPromise","_getNetworkPromise","waitUntil","Promise","race","response","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url","timeoutPromise","resolve","onNetworkTimeout","cacheMatch","setTimeout","fetchAndCachePut","error","clearTimeout","cacheName"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#network-falling-back-to-cache}\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({ timeoutId, request, logs, handler });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return await handler.waitUntil(Promise.race(promises)) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                await networkPromise;\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            error = fetchError;\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` +\n                        ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n"]},"metadata":{},"sourceType":"module"}