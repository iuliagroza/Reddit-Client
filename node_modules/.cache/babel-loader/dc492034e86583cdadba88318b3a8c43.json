{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _createForOfIteratorHelper from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\n\nvar StaleWhileRevalidate = /*#__PURE__*/function (_Strategy) {\n  _inherits(StaleWhileRevalidate, _Strategy);\n\n  var _super = _createSuper(StaleWhileRevalidate);\n\n  /**\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n   * `fetch()` requests made by this strategy.\n   * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n   */\n  function StaleWhileRevalidate(options) {\n    var _this;\n\n    _classCallCheck(this, StaleWhileRevalidate);\n\n    _this = _super.call(this, options); // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n    // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n\n    if (!_this.plugins.some(function (p) {\n      return 'cacheWillUpdate' in p;\n    })) {\n      _this.plugins.unshift(cacheOkAndOpaquePlugin);\n    }\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {module:workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(StaleWhileRevalidate, [{\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request, handler) {\n        var logs, fetchAndCachePromise, response, error, _iterator, _step, log;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                logs = [];\n\n                if (process.env.NODE_ENV !== 'production') {\n                  assert.isInstance(request, Request, {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'handle',\n                    paramName: 'request'\n                  });\n                }\n\n                fetchAndCachePromise = handler.fetchAndCachePut(request).catch(function () {// Swallow this error because a 'no-response' error will be thrown in\n                  // main handler return flow. This will be in the `waitUntil()` flow.\n                });\n                _context.next = 5;\n                return handler.cacheMatch(request);\n\n              case 5:\n                response = _context.sent;\n\n                if (!response) {\n                  _context.next = 10;\n                  break;\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logs.push(\"Found a cached response in the '\".concat(this.cacheName, \"'\") + \" cache. Will update with the network response in the background.\");\n                }\n\n                _context.next = 20;\n                break;\n\n              case 10:\n                if (process.env.NODE_ENV !== 'production') {\n                  logs.push(\"No response found in the '\".concat(this.cacheName, \"' cache. \") + \"Will wait for the network response.\");\n                }\n\n                _context.prev = 11;\n                _context.next = 14;\n                return fetchAndCachePromise;\n\n              case 14:\n                response = _context.sent;\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](11);\n                error = _context.t0;\n\n              case 20:\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n                  _iterator = _createForOfIteratorHelper(logs);\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      log = _step.value;\n                      logger.log(log);\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  messages.printFinalResponse(response);\n                  logger.groupEnd();\n                }\n\n                if (response) {\n                  _context.next = 23;\n                  break;\n                }\n\n                throw new WorkboxError('no-response', {\n                  url: request.url,\n                  error: error\n                });\n\n              case 23:\n                return _context.abrupt(\"return\", response);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[11, 17]]);\n      }));\n\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n  }]);\n\n  return StaleWhileRevalidate;\n}(Strategy);\n\nexport { StaleWhileRevalidate };","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient2/node_modules/workbox-strategies/StaleWhileRevalidate.js"],"names":["assert","logger","WorkboxError","cacheOkAndOpaquePlugin","Strategy","messages","StaleWhileRevalidate","options","plugins","some","p","unshift","request","handler","logs","process","env","NODE_ENV","isInstance","Request","moduleName","className","constructor","name","funcName","paramName","fetchAndCachePromise","fetchAndCachePut","catch","cacheMatch","response","push","cacheName","error","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"mappings":"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","sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate]{@link https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#stale-while-revalidate}\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses]{@link https://developers.google.com/web/tools/workbox/guides/handle-third-party-requests}.\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS]{@link https://enable-cors.org/}.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * [workbox-core]{@link module:workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {module:workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler\n            .fetchAndCachePut(request)\n            .catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = await fetchAndCachePromise;\n            }\n            catch (err) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n"]},"metadata":{},"sourceType":"module"}