{"ast":null,"code":"import _defineProperty from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"C:/Users/dell/Desktop/Info/Projects/RedditClient/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _extraReducers;import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import API from'../../lib/API';var initialState={status:'idle',error:null,isLoading:true,isError:false,page:{before:null,after:null},data:{post:{},comments:[]}};export var getPost=createAsyncThunk('post/getPost',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref){var _ref3,subreddit,id,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref3=_slicedToArray(_ref,2),subreddit=_ref3[0],id=_ref3[1];_context.next=3;return API.getPostWithComments([subreddit,id]);case 3:response=_context.sent;return _context.abrupt(\"return\",response);case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}());var postSlice=createSlice({name:'post',initialState:initialState,reducers:{},extraReducers:(_extraReducers={},_defineProperty(_extraReducers,String(getPost.pending),function(state){state.status='pending';state.isLoading=true;}),_defineProperty(_extraReducers,String(getPost.fulfilled),function(state,_ref4){var payload=_ref4.payload;state.status='succeeded';state.isError=false;state.isLoading=false;state.data.post=payload.post;state.data.comments=payload.comments;state.page.after=payload.after;state.page.before=payload.before;}),_defineProperty(_extraReducers,String(getPost.rejected),function(state,action){state.status='failed';state.isError=true;state.isLoading=false;state.error=action.error.message;}),_extraReducers)});export default postSlice.reducer;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient/src/features/post/postSlice.ts"],"names":["createSlice","createAsyncThunk","API","initialState","status","error","isLoading","isError","page","before","after","data","post","comments","getPost","subreddit","id","getPostWithComments","response","postSlice","name","reducers","extraReducers","String","pending","state","fulfilled","payload","rejected","action","message","reducer"],"mappings":"8qBAAA,OAASA,WAAT,CAAqCC,gBAArC,KAA6D,kBAA7D,CAEA,MAAOC,CAAAA,GAAP,KAAgB,eAAhB,CAaA,GAAMC,CAAAA,YAAmB,CAAG,CAC1BC,MAAM,CAAE,MADkB,CAE1BC,KAAK,CAAE,IAFmB,CAG1BC,SAAS,CAAE,IAHe,CAI1BC,OAAO,CAAE,KAJiB,CAK1BC,IAAI,CAAE,CACJC,MAAM,CAAE,IADJ,CAEJC,KAAK,CAAE,IAFH,CALoB,CAS1BC,IAAI,CAAE,CACJC,IAAI,CAAE,EADF,CAEJC,QAAQ,CAAE,EAFN,CAToB,CAA5B,CAeA,MAAO,IAAMC,CAAAA,OAAO,CAAGb,gBAAgB,CACrC,cADqC,2FAErC,oMAAQc,SAAR,UAAmBC,EAAnB,gCACoCd,CAAAA,GAAG,CAACe,mBAAJ,CAAwB,CAACF,SAAD,CAAYC,EAAZ,CAAxB,CADpC,QACQE,QADR,+CAGSA,QAHT,wDAFqC,gEAAhC,CASP,GAAMC,CAAAA,SAAS,CAAGnB,WAAW,CAAC,CAC5BoB,IAAI,CAAE,MADsB,CAE5BjB,YAAY,CAAZA,YAF4B,CAG5BkB,QAAQ,CAAE,EAHkB,CAI5BC,aAAa,mDACVC,MAAM,CAACT,OAAO,CAACU,OAAT,CADI,CACgB,SAACC,KAAD,CAAW,CACpCA,KAAK,CAACrB,MAAN,CAAe,SAAf,CACAqB,KAAK,CAACnB,SAAN,CAAkB,IAAlB,CACD,CAJU,iCAKViB,MAAM,CAACT,OAAO,CAACY,SAAT,CALI,CAKkB,SAC3BD,KAD2B,OAGxB,IADDE,CAAAA,OACC,OADDA,OACC,CACHF,KAAK,CAACrB,MAAN,CAAe,WAAf,CACAqB,KAAK,CAAClB,OAAN,CAAgB,KAAhB,CACAkB,KAAK,CAACnB,SAAN,CAAkB,KAAlB,CACAmB,KAAK,CAACd,IAAN,CAAWC,IAAX,CAAkBe,OAAO,CAACf,IAA1B,CACAa,KAAK,CAACd,IAAN,CAAWE,QAAX,CAAsBc,OAAO,CAACd,QAA9B,CACAY,KAAK,CAACjB,IAAN,CAAWE,KAAX,CAAmBiB,OAAO,CAACjB,KAA3B,CACAe,KAAK,CAACjB,IAAN,CAAWC,MAAX,CAAoBkB,OAAO,CAAClB,MAA5B,CACD,CAhBU,iCAiBVc,MAAM,CAACT,OAAO,CAACc,QAAT,CAjBI,CAiBiB,SAACH,KAAD,CAAQI,MAAR,CAAmB,CAC7CJ,KAAK,CAACrB,MAAN,CAAe,QAAf,CACAqB,KAAK,CAAClB,OAAN,CAAgB,IAAhB,CACAkB,KAAK,CAACnB,SAAN,CAAkB,KAAlB,CACAmB,KAAK,CAACpB,KAAN,CAAcwB,MAAM,CAACxB,KAAP,CAAayB,OAA3B,CACD,CAtBU,iBAJe,CAAD,CAA7B,CA8BA,cAAeX,CAAAA,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { IFetch, TPost } from '../index';\nimport API from '../../lib/API';\n\nexport interface IPost extends IFetch {\n  data: TPost;\n}\n\ntype TResponse = {\n  post: object;\n  comments: object[];\n  after: string;\n  before: string;\n};\n\nconst initialState: IPost = {\n  status: 'idle',\n  error: null,\n  isLoading: true,\n  isError: false,\n  page: {\n    before: null,\n    after: null,\n  },\n  data: {\n    post: {},\n    comments: [],\n  },\n};\n\nexport const getPost = createAsyncThunk(\n  'post/getPost',\n  async ([subreddit, id]: string[]) => {\n    const response: TResponse = await API.getPostWithComments([subreddit, id]);\n\n    return response;\n  },\n);\n\nconst postSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [String(getPost.pending)]: (state) => {\n      state.status = 'pending';\n      state.isLoading = true;\n    },\n    [String(getPost.fulfilled)]: (\n      state,\n      { payload }: PayloadAction<TResponse>,\n    ) => {\n      state.status = 'succeeded';\n      state.isError = false;\n      state.isLoading = false;\n      state.data.post = payload.post;\n      state.data.comments = payload.comments;\n      state.page.after = payload.after;\n      state.page.before = payload.before;\n    },\n    [String(getPost.rejected)]: (state, action) => {\n      state.status = 'failed';\n      state.isError = true;\n      state.isLoading = false;\n      state.error = action.error.message;\n    },\n  },\n});\n\nexport default postSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}