{"ast":null,"code":"import React from'react';import{useParams}from'react-router-dom';import{Alert,AlertTitle}from'@material-ui/lab';import Layout from'../../components/Layout';import Card from'../../components/Card';import Skeleton from'../../components/Skeleton';import{getSubredditByName,getSubredditPosts}from'../../features/subreddit/subredditSlice';import useFetch from'../../hooks/useFetch';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Subreddit=function Subreddit(){var _useParams=useParams(),subredditName=_useParams.subredditName;var _useFetch=useFetch({action:getSubredditByName,params:subredditName}),info=_useFetch.subreddit.info;var _useFetch2=useFetch({action:getSubredditPosts,params:subredditName}),_useFetch2$subreddit=_useFetch2.subreddit,posts=_useFetch2$subreddit.posts,isLoading=_useFetch2$subreddit.isLoading,isError=_useFetch2$subreddit.isError,error=_useFetch2$subreddit.error;if(isError){return/*#__PURE__*/_jsx(Layout,{aside:true,sidebarProps:{type:'filter'},children:/*#__PURE__*/_jsxs(Alert,{severity:\"error\",children:[/*#__PURE__*/_jsx(AlertTitle,{children:\"Error\"}),\"There was an error with your request \\u2014 \",/*#__PURE__*/_jsx(\"strong\",{children:error})]})});}if(isLoading){return/*#__PURE__*/_jsx(Layout,{aside:true,sidebarProps:{type:'subreddit'},children:Array.from(new Array(6)).map(function(_,idx){return/*#__PURE__*/_jsx(Skeleton,{type:\"card\"},idx);})});}return/*#__PURE__*/_jsx(Layout,{aside:true,sidebarProps:{type:'subreddit',data:info},children:posts.map(function(post){return/*#__PURE__*/_jsx(Card,{postProps:{data:post}},post.id);})});};export default Subreddit;","map":{"version":3,"sources":["C:/Users/dell/Desktop/Info/Projects/RedditClient2/src/pages/subreddit/index.tsx"],"names":["React","useParams","Alert","AlertTitle","Layout","Card","Skeleton","getSubredditByName","getSubredditPosts","useFetch","Subreddit","subredditName","action","params","info","subreddit","posts","isLoading","isError","error","type","Array","from","map","_","idx","data","post","id"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,OAASC,KAAT,CAAgBC,UAAhB,KAAkC,kBAAlC,CACA,MAAOC,CAAAA,MAAP,KAAmB,yBAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,MAAOC,CAAAA,QAAP,KAAqB,2BAArB,CACA,OACEC,kBADF,CAEEC,iBAFF,KAGO,yCAHP,CAIA,MAAOC,CAAAA,QAAP,KAAqB,sBAArB,C,wFAMA,GAAMC,CAAAA,SAAmB,CAAG,QAAtBA,CAAAA,SAAsB,EAAM,CAChC,eAA0BT,SAAS,EAAnC,CAAQU,aAAR,YAAQA,aAAR,CAEA,cAEIF,QAAQ,CAAC,CAAEG,MAAM,CAAEL,kBAAV,CAA8BM,MAAM,CAAEF,aAAtC,CAAD,CAFZ,CACeG,IADf,WACEC,SADF,CACeD,IADf,CAIA,eAEIL,QAAQ,CAAC,CAAEG,MAAM,CAAEJ,iBAAV,CAA6BK,MAAM,CAAEF,aAArC,CAAD,CAFZ,iCACEI,SADF,CACeC,KADf,sBACeA,KADf,CACsBC,SADtB,sBACsBA,SADtB,CACiCC,OADjC,sBACiCA,OADjC,CAC0CC,KAD1C,sBAC0CA,KAD1C,CAIA,GAAID,OAAJ,CAAa,CACX,mBACE,KAAC,MAAD,EAAQ,KAAK,KAAb,CAAc,YAAY,CAAE,CAAEE,IAAI,CAAE,QAAR,CAA5B,uBACE,MAAC,KAAD,EAAO,QAAQ,CAAC,OAAhB,wBACE,KAAC,UAAD,oBADF,6DAEyC,wBAASD,KAAT,EAFzC,GADF,EADF,CAQD,CAED,GAAIF,SAAJ,CAAe,CACb,mBACE,KAAC,MAAD,EAAQ,KAAK,KAAb,CAAc,YAAY,CAAE,CAAEG,IAAI,CAAE,WAAR,CAA5B,UACGC,KAAK,CAACC,IAAN,CAAW,GAAID,CAAAA,KAAJ,CAAU,CAAV,CAAX,EAAyBE,GAAzB,CAA6B,SAACC,CAAD,CAAIC,GAAJ,qBAC5B,KAAC,QAAD,EAAU,IAAI,CAAC,MAAf,EAA2BA,GAA3B,CAD4B,EAA7B,CADH,EADF,CAOD,CAED,mBACE,KAAC,MAAD,EAAQ,KAAK,KAAb,CAAc,YAAY,CAAE,CAAEL,IAAI,CAAE,WAAR,CAAqBM,IAAI,CAAEZ,IAA3B,CAA5B,UACGE,KAAK,CAACO,GAAN,CAAU,SAACI,IAAD,qBACT,KAAC,IAAD,EAAM,SAAS,CAAE,CAAED,IAAI,CAAEC,IAAR,CAAjB,EAAsCA,IAAI,CAACC,EAA3C,CADS,EAAV,CADH,EADF,CAOD,CAvCD,CAyCA,cAAelB,CAAAA,SAAf","sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport Layout from '../../components/Layout';\nimport Card from '../../components/Card';\nimport Skeleton from '../../components/Skeleton';\nimport {\n  getSubredditByName,\n  getSubredditPosts,\n} from '../../features/subreddit/subredditSlice';\nimport useFetch from '../../hooks/useFetch';\n\ntype ParamsProps = {\n  subredditName: string;\n};\n\nconst Subreddit: React.FC = () => {\n  const { subredditName } = useParams<ParamsProps>();\n\n  const {\n    subreddit: { info },\n  } = useFetch({ action: getSubredditByName, params: subredditName });\n\n  const {\n    subreddit: { posts, isLoading, isError, error },\n  } = useFetch({ action: getSubredditPosts, params: subredditName });\n\n  if (isError) {\n    return (\n      <Layout aside sidebarProps={{ type: 'filter' }}>\n        <Alert severity=\"error\">\n          <AlertTitle>Error</AlertTitle>\n          There was an error with your request â€” <strong>{error}</strong>\n        </Alert>\n      </Layout>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Layout aside sidebarProps={{ type: 'subreddit' }}>\n        {Array.from(new Array(6)).map((_, idx) => (\n          <Skeleton type=\"card\" key={idx} />\n        ))}\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout aside sidebarProps={{ type: 'subreddit', data: info }}>\n      {posts.map((post: any) => (\n        <Card postProps={{ data: post }} key={post.id} />\n      ))}\n    </Layout>\n  );\n};\n\nexport default Subreddit;\n"]},"metadata":{},"sourceType":"module"}